#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
import server.imweb.imweb_base_service
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(server.imweb.imweb_base_service.Iface):
  def imweb_get_uid_by_imid(self, imid):
    """
    Parameters:
     - imid
    """
    pass

  def imweb_get_imid_by_uid(self, uid):
    """
    Parameters:
     - uid
    """
    pass

  def imweb_multi_get_imid_by_uids(self, uids):
    """
    Parameters:
     - uids
    """
    pass

  def imweb_multi_get_uid_by_imids(self, imids):
    """
    Parameters:
     - imids
    """
    pass

  def imweb_batch_imid_info_by_imids(self, imids):
    """
    Parameters:
     - imids
    """
    pass

  def imweb_batch_imid_info_by_uids(self, uids):
    """
    Parameters:
     - uids
    """
    pass

  def imweb_get_friend_list_by_uid(self, uid):
    """
    Parameters:
     - uid
    """
    pass

  def imweb_get_group_info(self, uid):
    """
    Parameters:
     - uid
    """
    pass


class Client(server.imweb.imweb_base_service.Client, Iface):
  def __init__(self, iprot, oprot=None):
    server.imweb.imweb_base_service.Client.__init__(self, iprot, oprot)

  def imweb_get_uid_by_imid(self, imid):
    """
    Parameters:
     - imid
    """
    self.send_imweb_get_uid_by_imid(imid)
    return self.recv_imweb_get_uid_by_imid()

  def send_imweb_get_uid_by_imid(self, imid):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(imid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('imweb_get_uid_by_imid', TMessageType.CALL, self._seqid)
    args = imweb_get_uid_by_imid_args()
    args.imid = imid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_get_uid_by_imid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_get_uid_by_imid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_get_uid_by_imid failed: unknown result");

  def imweb_get_imid_by_uid(self, uid):
    """
    Parameters:
     - uid
    """
    self.send_imweb_get_imid_by_uid(uid)
    return self.recv_imweb_get_imid_by_uid()

  def send_imweb_get_imid_by_uid(self, uid):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('imweb_get_imid_by_uid', TMessageType.CALL, self._seqid)
    args = imweb_get_imid_by_uid_args()
    args.uid = uid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_get_imid_by_uid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_get_imid_by_uid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_get_imid_by_uid failed: unknown result");

  def imweb_multi_get_imid_by_uids(self, uids):
    """
    Parameters:
     - uids
    """
    self.send_imweb_multi_get_imid_by_uids(uids)
    return self.recv_imweb_multi_get_imid_by_uids()

  def send_imweb_multi_get_imid_by_uids(self, uids):
    self._oprot.writeMessageBegin('imweb_multi_get_imid_by_uids', TMessageType.CALL, self._seqid)
    args = imweb_multi_get_imid_by_uids_args()
    args.uids = uids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_multi_get_imid_by_uids(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_multi_get_imid_by_uids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_multi_get_imid_by_uids failed: unknown result");

  def imweb_multi_get_uid_by_imids(self, imids):
    """
    Parameters:
     - imids
    """
    self.send_imweb_multi_get_uid_by_imids(imids)
    return self.recv_imweb_multi_get_uid_by_imids()

  def send_imweb_multi_get_uid_by_imids(self, imids):
    self._oprot.writeMessageBegin('imweb_multi_get_uid_by_imids', TMessageType.CALL, self._seqid)
    args = imweb_multi_get_uid_by_imids_args()
    args.imids = imids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_multi_get_uid_by_imids(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_multi_get_uid_by_imids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_multi_get_uid_by_imids failed: unknown result");

  def imweb_batch_imid_info_by_imids(self, imids):
    """
    Parameters:
     - imids
    """
    self.send_imweb_batch_imid_info_by_imids(imids)
    return self.recv_imweb_batch_imid_info_by_imids()

  def send_imweb_batch_imid_info_by_imids(self, imids):
    self._oprot.writeMessageBegin('imweb_batch_imid_info_by_imids', TMessageType.CALL, self._seqid)
    args = imweb_batch_imid_info_by_imids_args()
    args.imids = imids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_batch_imid_info_by_imids(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_batch_imid_info_by_imids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_batch_imid_info_by_imids failed: unknown result");

  def imweb_batch_imid_info_by_uids(self, uids):
    """
    Parameters:
     - uids
    """
    self.send_imweb_batch_imid_info_by_uids(uids)
    return self.recv_imweb_batch_imid_info_by_uids()

  def send_imweb_batch_imid_info_by_uids(self, uids):
    self._oprot.writeMessageBegin('imweb_batch_imid_info_by_uids', TMessageType.CALL, self._seqid)
    args = imweb_batch_imid_info_by_uids_args()
    args.uids = uids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_batch_imid_info_by_uids(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_batch_imid_info_by_uids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_batch_imid_info_by_uids failed: unknown result");

  def imweb_get_friend_list_by_uid(self, uid):
    """
    Parameters:
     - uid
    """
    self.send_imweb_get_friend_list_by_uid(uid)
    return self.recv_imweb_get_friend_list_by_uid()

  def send_imweb_get_friend_list_by_uid(self, uid):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('imweb_get_friend_list_by_uid', TMessageType.CALL, self._seqid)
    args = imweb_get_friend_list_by_uid_args()
    args.uid = uid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_get_friend_list_by_uid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_get_friend_list_by_uid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_get_friend_list_by_uid failed: unknown result");

  def imweb_get_group_info(self, uid):
    """
    Parameters:
     - uid
    """
    self.send_imweb_get_group_info(uid)
    return self.recv_imweb_get_group_info()

  def send_imweb_get_group_info(self, uid):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('imweb_get_group_info', TMessageType.CALL, self._seqid)
    args = imweb_get_group_info_args()
    args.uid = uid
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_imweb_get_group_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = imweb_get_group_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "imweb_get_group_info failed: unknown result");


class Processor(server.imweb.imweb_base_service.Processor, Iface, TProcessor):
  def __init__(self, handler):
    server.imweb.imweb_base_service.Processor.__init__(self, handler)
    self._processMap["imweb_get_uid_by_imid"] = Processor.process_imweb_get_uid_by_imid
    self._processMap["imweb_get_imid_by_uid"] = Processor.process_imweb_get_imid_by_uid
    self._processMap["imweb_multi_get_imid_by_uids"] = Processor.process_imweb_multi_get_imid_by_uids
    self._processMap["imweb_multi_get_uid_by_imids"] = Processor.process_imweb_multi_get_uid_by_imids
    self._processMap["imweb_batch_imid_info_by_imids"] = Processor.process_imweb_batch_imid_info_by_imids
    self._processMap["imweb_batch_imid_info_by_uids"] = Processor.process_imweb_batch_imid_info_by_uids
    self._processMap["imweb_get_friend_list_by_uid"] = Processor.process_imweb_get_friend_list_by_uid
    self._processMap["imweb_get_group_info"] = Processor.process_imweb_get_group_info

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_imweb_get_uid_by_imid(self, seqid, iprot, oprot):
    args = imweb_get_uid_by_imid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_get_uid_by_imid_result()
    result.success = self._handler.imweb_get_uid_by_imid(args.imid)
    oprot.writeMessageBegin("imweb_get_uid_by_imid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_imweb_get_imid_by_uid(self, seqid, iprot, oprot):
    args = imweb_get_imid_by_uid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_get_imid_by_uid_result()
    result.success = self._handler.imweb_get_imid_by_uid(args.uid)
    oprot.writeMessageBegin("imweb_get_imid_by_uid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_imweb_multi_get_imid_by_uids(self, seqid, iprot, oprot):
    args = imweb_multi_get_imid_by_uids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_multi_get_imid_by_uids_result()
    result.success = self._handler.imweb_multi_get_imid_by_uids(args.uids)
    oprot.writeMessageBegin("imweb_multi_get_imid_by_uids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_imweb_multi_get_uid_by_imids(self, seqid, iprot, oprot):
    args = imweb_multi_get_uid_by_imids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_multi_get_uid_by_imids_result()
    result.success = self._handler.imweb_multi_get_uid_by_imids(args.imids)
    oprot.writeMessageBegin("imweb_multi_get_uid_by_imids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_imweb_batch_imid_info_by_imids(self, seqid, iprot, oprot):
    args = imweb_batch_imid_info_by_imids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_batch_imid_info_by_imids_result()
    result.success = self._handler.imweb_batch_imid_info_by_imids(args.imids)
    oprot.writeMessageBegin("imweb_batch_imid_info_by_imids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_imweb_batch_imid_info_by_uids(self, seqid, iprot, oprot):
    args = imweb_batch_imid_info_by_uids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_batch_imid_info_by_uids_result()
    result.success = self._handler.imweb_batch_imid_info_by_uids(args.uids)
    oprot.writeMessageBegin("imweb_batch_imid_info_by_uids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_imweb_get_friend_list_by_uid(self, seqid, iprot, oprot):
    args = imweb_get_friend_list_by_uid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_get_friend_list_by_uid_result()
    result.success = self._handler.imweb_get_friend_list_by_uid(args.uid)
    oprot.writeMessageBegin("imweb_get_friend_list_by_uid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_imweb_get_group_info(self, seqid, iprot, oprot):
    args = imweb_get_group_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = imweb_get_group_info_result()
    result.success = self._handler.imweb_get_group_info(args.uid)
    oprot.writeMessageBegin("imweb_get_group_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class imweb_get_uid_by_imid_args:
  """
  Attributes:
   - imid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'imid', None, None, ), # 1
  )

  def __init__(self, imid=None,):
    self.imid = imid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.imid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_uid_by_imid_args')
    if self.imid != None:
      oprot.writeFieldBegin('imid', TType.STRING, 1)
      oprot.writeString(self.imid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_get_uid_by_imid_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_uid_by_imid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_get_imid_by_uid_args:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
  )

  def __init__(self, uid=None,):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_imid_by_uid_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_get_imid_by_uid_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_imid_by_uid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_multi_get_imid_by_uids_args:
  """
  Attributes:
   - uids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uids', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, uids=None,):
    self.uids = uids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.uids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_multi_get_imid_by_uids_args')
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter6 in self.uids:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_multi_get_imid_by_uids_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin() 
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readString();
            self.success[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_multi_get_imid_by_uids_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter14,viter15 in self.success.items():
        oprot.writeString(kiter14)
        oprot.writeString(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_multi_get_uid_by_imids_args:
  """
  Attributes:
   - imids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'imids', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, imids=None,):
    self.imids = imids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.imids = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = iprot.readString();
            self.imids.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_multi_get_uid_by_imids_args')
    if self.imids != None:
      oprot.writeFieldBegin('imids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.imids))
      for iter22 in self.imids:
        oprot.writeString(iter22)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_multi_get_uid_by_imids_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin() 
          for _i27 in xrange(_size23):
            _key28 = iprot.readString();
            _val29 = iprot.readString();
            self.success[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_multi_get_uid_by_imids_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter30,viter31 in self.success.items():
        oprot.writeString(kiter30)
        oprot.writeString(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_batch_imid_info_by_imids_args:
  """
  Attributes:
   - imids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'imids', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, imids=None,):
    self.imids = imids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.imids = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readString();
            self.imids.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_batch_imid_info_by_imids_args')
    if self.imids != None:
      oprot.writeFieldBegin('imids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.imids))
      for iter38 in self.imids:
        oprot.writeString(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_batch_imid_info_by_imids_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    #(0, TType.STRUCT, 'success', (server.imweb.ttypes.query_resultset, server.imweb.ttypes.query_resultset.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          #self.success = server.imweb.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_batch_imid_info_by_imids_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_batch_imid_info_by_uids_args:
  """
  Attributes:
   - uids
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uids', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, uids=None,):
    self.uids = uids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uids = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readString();
            self.uids.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_batch_imid_info_by_uids_args')
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter45 in self.uids:
        oprot.writeString(iter45)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_batch_imid_info_by_uids_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    #(0, TType.STRUCT, 'success', (server.imweb.ttypes.query_resultset, server.imweb.ttypes.query_resultset.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = server.imweb.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_batch_imid_info_by_uids_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_get_friend_list_by_uid_args:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
  )

  def __init__(self, uid=None,):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_friend_list_by_uid_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_get_friend_list_by_uid_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    #(0, TType.STRUCT, 'success', (server.imweb.ttypes.query_resultset, server.imweb.ttypes.query_resultset.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = server.imweb.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_friend_list_by_uid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_get_group_info_args:
  """
  Attributes:
   - uid
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
  )

  def __init__(self, uid=None,):
    self.uid = uid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_group_info_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class imweb_get_group_info_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype47, _vtype48, _size46 ) = iprot.readMapBegin() 
          for _i50 in xrange(_size46):
            _key51 = iprot.readString();
            _val52 = iprot.readString();
            self.success[_key51] = _val52
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('imweb_get_group_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter53,viter54 in self.success.items():
        oprot.writeString(kiter53)
        oprot.writeString(viter54)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


