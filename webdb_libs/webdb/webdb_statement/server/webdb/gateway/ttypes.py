#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class consistency_level_type:
  WEAK = 0
  NORMAL = 1
  STRONG = 2

  _VALUES_TO_NAMES = {
    0: "WEAK",
    1: "NORMAL",
    2: "STRONG",
  }

  _NAMES_TO_VALUES = {
    "WEAK": 0,
    "NORMAL": 1,
    "STRONG": 2,
  }

class query_resultset:
  """
  Attributes:
   - key_index
   - dataset
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'key_index', (TType.STRING,None,TType.I32,None), None, ), # 1
    (2, TType.LIST, 'dataset', (TType.LIST,(TType.STRING,None)), None, ), # 2
  )

  def __init__(self, key_index=None, dataset=None,):
    self.key_index = key_index
    self.dataset = dataset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.key_index = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readI32();
            self.key_index[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.dataset = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = []
            (_etype16, _size13) = iprot.readListBegin()
            for _i17 in xrange(_size13):
              _elem18 = iprot.readString();
              _elem12.append(_elem18)
            iprot.readListEnd()
            self.dataset.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('query_resultset')
    if self.key_index != None:
      oprot.writeFieldBegin('key_index', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.key_index))
      for kiter19,viter20 in self.key_index.items():
        oprot.writeString(kiter19)
        oprot.writeI32(viter20)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.dataset != None:
      oprot.writeFieldBegin('dataset', TType.LIST, 2)
      oprot.writeListBegin(TType.LIST, len(self.dataset))
      for iter21 in self.dataset:
        oprot.writeListBegin(TType.STRING, len(iter21))
        for iter22 in iter21:
          oprot.writeString(iter22)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

