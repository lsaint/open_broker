#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import webdb_gateway_service
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string get_uid(key passport, consistency_level_type cl)'
  print '  string get_uid_by_passport(key passport, consistency_level_type cl)'
  print '  string active_uid(key passport, string sha1Passwd, string ip, string nick, consistency_level_type cl)'
  print '   active_uid_and_imid(key passport, string sha1Passwd, string ip, consistency_level_type cl)'
  print '  string get_uid_by_account(key account, consistency_level_type cl)'
  print '  query_resultset get_session_list(key uid, consistency_level_type cl)'
  print '  query_resultset get_favorite_session_list(key uid, consistency_level_type cl)'
  print '  i32 get_session_list_count_by_role(key uid, string role, consistency_level_type cl)'
  print '  query_resultset get_session_list_by_role(key uid, string role, i32 page, i32 per_page, string order_by, bool descending, consistency_level_type cl)'
  print '   batch_get_session_list_by_role(key uid,  roles, string order_by, bool descending, consistency_level_type cl)'
  print '  bool validate_session_owner(key sid, string uid, consistency_level_type cl)'
  print '   get_sessions_by_owner(key ownerid, consistency_level_type cl)'
  print '  query_resultset get_session_info(key sid,  columns, consistency_level_type cl)'
  print '  query_resultset batch_get_session_info( sids,  columns, consistency_level_type cl)'
  print '  query_resultset get_user_info(key uid,  columns, consistency_level_type cl)'
  print '  query_resultset batch_get_user_info( uids,  columns, consistency_level_type cl)'
  print '  string get_session_score(key sid, consistency_level_type cl)'
  print '  string get_session_logo_url(key sid, consistency_level_type cl)'
  print '  query_resultset batch_get_session_logo_url( sids, consistency_level_type cl)'
  print '  string get_session_asid(key sid, consistency_level_type cl)'
  print '  query_resultset batch_get_session_asid( sids, consistency_level_type cl)'
  print '  query_resultset get_session_member_info(key sid, string uid,  columns, consistency_level_type cl)'
  print '  query_resultset batch_get_member_info_by_session(key uid,  sids,  columns, consistency_level_type cl)'
  print '  query_resultset batch_get_member_info_by_user(key sid,  uids,  columns, consistency_level_type cl)'
  print '  string get_yy_admin_type(key uid, consistency_level_type cl)'
  print '  i32 get_session_count_by_owner(key uid, consistency_level_type cl)'
  print '   batch_get_role_by_memberid(key sid,  uids, consistency_level_type cl)'
  print '   get_session_member_count_by_role(key sid,  roles, consistency_level_type cl)'
  print '  i32 get_session_regular_member_count(key sid, consistency_level_type cl)'
  print '  i32 get_session_ip_blacklist_count(key sid, string date_from, string date_to, string reason, string uid, consistency_level_type cl)'
  print '  query_resultset get_session_ip_blacklist(key sid, string date_from, string date_to, string reason, string uid,  columns, i32 page, i32 per_page, string order_by, bool descending, consistency_level_type cl)'
  print '  i32 get_session_id_blacklist_count(key sid, string date_from, string date_to, string reason, string uid, consistency_level_type cl)'
  print '  query_resultset get_session_id_blacklist(key sid, string date_from, string date_to, string reason, string uid,  columns, i32 page, i32 per_page, string order_by, bool descending, consistency_level_type cl)'
  print '  query_resultset get_session_members_by_role(key sid,  columns, string role, i32 page, i32 per_page, string order_by, bool descending, consistency_level_type cl)'
  print '  i32 create_session(key sid, string name, string isp, string blimit, string bpub, string typestr, string type, string uid, string ip, consistency_level_type cl)'
  print '  bool set_subsession_order(key pid,  sids,  orders, consistency_level_type cl)'
  print '  bool set_session_password(key sid, string pwd, string new_pwd, consistency_level_type cl)'
  print '  bool erase_session_password(key sid, consistency_level_type cl)'
  print '  bool enable_autio_high_quality(key sid, consistency_level_type cl)'
  print '  bool set_autio_high_quality(key sid, string flag, consistency_level_type cl)'
  print '  bool disable_audio_high_quality(key sid, consistency_level_type cl)'
  print '  bool erase_subsession_admin(key sid,  uids, consistency_level_type cl)'
  print '  i32 batch_set_session_member_role(key sid,  uids, string role, consistency_level_type cl)'
  print '  i32 batch_erase_subsession_manager(key sid,  uids, consistency_level_type cl)'
  print '  bool check_global_ban(key uid, consistency_level_type cl)'
  print '  bool check_cookie(string cookie, key uid, string expirtime, consistency_level_type cl)'
  print '  i32 batch_erase_session_member(key sid,  uids, string admin_uid, string admin_nick, consistency_level_type cl)'
  print '  i32 erase_session_blacklist(key sid, byte ban_type, consistency_level_type cl)'
  print '  i32 batch_erase_session_blacklist_element(key sid,  ban_types,  uids_ips, consistency_level_type cl)'
  print '  i32 set_application_rule(key sid, string request_jifen, string app_instru, consistency_level_type cl)'
  print '  query_resultset get_guild_applications_per_page(key tid,  columns, i32 page, i32 per_page, string order_by, bool descending, consistency_level_type cl)'
  print '  i32 get_guild_applications_count(key tid, consistency_level_type cl)'
  print '  query_resultset get_guild_applications_by_uids(key tid,  uids,  columns, consistency_level_type cl)'
  print '  i32 handle_applications(key tid,  uids, string new_role, string admin_uid, string admin_nick, consistency_level_type cl)'
  print '  query_resultset get_guild_exited_members_per_page(key tid,  columns, i32 page, i32 per_page, string order_by, bool descending, consistency_level_type cl)'
  print '  i32 get_guild_exited_members_count(key tid, consistency_level_type cl)'
  print '  query_resultset get_guild_exited_members_by_uids(key tid,  uids,  columns, consistency_level_type cl)'
  print '  i32 resume_members(key tid,  uids, consistency_level_type cl)'
  print '  string get_session_gyz(key sid, consistency_level_type cl)'
  print '  string get_sid_by_asid(key asid, consistency_level_type cl)'
  print '  query_resultset get_session_list_by_ownerid(key ownerid, consistency_level_type cl)'
  print '  query_resultset batch_get_sub_sessions_info(key tid, string pid,  columns, bool full_recursive, consistency_level_type cl)'
  print '  query_resultset get_sub_sessions_count(key tid, string pid, consistency_level_type cl)'
  print '  i32 set_sub_sessions_order(key tid,  sub_sessions_sort, consistency_level_type cl)'
  print '  i32 reset_account_by_passport(string account, key passport, consistency_level_type cl)'
  print '  i32 reset_passwd_by_passport(string passwd, key passport, consistency_level_type cl)'
  print '  i32 validate_user_pwd(key passport, string shapasswd, string yzm_auth, string ip, string app_type, consistency_level_type cl)'
  print '  i32 validate_user_pwd_by_uid(key uid, string shapasswd, string time, string ip, string app_type, consistency_level_type cl)'
  print '  string get_user_psw(key uid, consistency_level_type cl)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = webdb_gateway_service.Client(protocol)
transport.open()

if cmd == 'get_uid':
  if len(args) != 2:
    print 'get_uid requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_uid(args[0],eval(args[1]),))

elif cmd == 'get_uid_by_passport':
  if len(args) != 2:
    print 'get_uid_by_passport requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_uid_by_passport(args[0],eval(args[1]),))

elif cmd == 'active_uid':
  if len(args) != 5:
    print 'active_uid requires 5 args'
    sys.exit(1)
  pp.pprint(client.active_uid(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'active_uid_and_imid':
  if len(args) != 4:
    print 'active_uid_and_imid requires 4 args'
    sys.exit(1)
  pp.pprint(client.active_uid_and_imid(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'get_uid_by_account':
  if len(args) != 2:
    print 'get_uid_by_account requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_uid_by_account(args[0],eval(args[1]),))

elif cmd == 'get_session_list':
  if len(args) != 2:
    print 'get_session_list requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_list(args[0],eval(args[1]),))

elif cmd == 'get_favorite_session_list':
  if len(args) != 2:
    print 'get_favorite_session_list requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_favorite_session_list(args[0],eval(args[1]),))

elif cmd == 'get_session_list_count_by_role':
  if len(args) != 3:
    print 'get_session_list_count_by_role requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_session_list_count_by_role(args[0],args[1],eval(args[2]),))

elif cmd == 'get_session_list_by_role':
  if len(args) != 7:
    print 'get_session_list_by_role requires 7 args'
    sys.exit(1)
  pp.pprint(client.get_session_list_by_role(args[0],args[1],eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'batch_get_session_list_by_role':
  if len(args) != 5:
    print 'batch_get_session_list_by_role requires 5 args'
    sys.exit(1)
  pp.pprint(client.batch_get_session_list_by_role(args[0],eval(args[1]),args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'validate_session_owner':
  if len(args) != 3:
    print 'validate_session_owner requires 3 args'
    sys.exit(1)
  pp.pprint(client.validate_session_owner(args[0],args[1],eval(args[2]),))

elif cmd == 'get_sessions_by_owner':
  if len(args) != 2:
    print 'get_sessions_by_owner requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_sessions_by_owner(args[0],eval(args[1]),))

elif cmd == 'get_session_info':
  if len(args) != 3:
    print 'get_session_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_session_info(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'batch_get_session_info':
  if len(args) != 3:
    print 'batch_get_session_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.batch_get_session_info(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'get_user_info':
  if len(args) != 3:
    print 'get_user_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_user_info(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'batch_get_user_info':
  if len(args) != 3:
    print 'batch_get_user_info requires 3 args'
    sys.exit(1)
  pp.pprint(client.batch_get_user_info(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'get_session_score':
  if len(args) != 2:
    print 'get_session_score requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_score(args[0],eval(args[1]),))

elif cmd == 'get_session_logo_url':
  if len(args) != 2:
    print 'get_session_logo_url requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_logo_url(args[0],eval(args[1]),))

elif cmd == 'batch_get_session_logo_url':
  if len(args) != 2:
    print 'batch_get_session_logo_url requires 2 args'
    sys.exit(1)
  pp.pprint(client.batch_get_session_logo_url(eval(args[0]),eval(args[1]),))

elif cmd == 'get_session_asid':
  if len(args) != 2:
    print 'get_session_asid requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_asid(args[0],eval(args[1]),))

elif cmd == 'batch_get_session_asid':
  if len(args) != 2:
    print 'batch_get_session_asid requires 2 args'
    sys.exit(1)
  pp.pprint(client.batch_get_session_asid(eval(args[0]),eval(args[1]),))

elif cmd == 'get_session_member_info':
  if len(args) != 4:
    print 'get_session_member_info requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_session_member_info(args[0],args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'batch_get_member_info_by_session':
  if len(args) != 4:
    print 'batch_get_member_info_by_session requires 4 args'
    sys.exit(1)
  pp.pprint(client.batch_get_member_info_by_session(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'batch_get_member_info_by_user':
  if len(args) != 4:
    print 'batch_get_member_info_by_user requires 4 args'
    sys.exit(1)
  pp.pprint(client.batch_get_member_info_by_user(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'get_yy_admin_type':
  if len(args) != 2:
    print 'get_yy_admin_type requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_yy_admin_type(args[0],eval(args[1]),))

elif cmd == 'get_session_count_by_owner':
  if len(args) != 2:
    print 'get_session_count_by_owner requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_count_by_owner(args[0],eval(args[1]),))

elif cmd == 'batch_get_role_by_memberid':
  if len(args) != 3:
    print 'batch_get_role_by_memberid requires 3 args'
    sys.exit(1)
  pp.pprint(client.batch_get_role_by_memberid(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'get_session_member_count_by_role':
  if len(args) != 3:
    print 'get_session_member_count_by_role requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_session_member_count_by_role(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'get_session_regular_member_count':
  if len(args) != 2:
    print 'get_session_regular_member_count requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_regular_member_count(args[0],eval(args[1]),))

elif cmd == 'get_session_ip_blacklist_count':
  if len(args) != 6:
    print 'get_session_ip_blacklist_count requires 6 args'
    sys.exit(1)
  pp.pprint(client.get_session_ip_blacklist_count(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'get_session_ip_blacklist':
  if len(args) != 11:
    print 'get_session_ip_blacklist requires 11 args'
    sys.exit(1)
  pp.pprint(client.get_session_ip_blacklist(args[0],args[1],args[2],args[3],args[4],eval(args[5]),eval(args[6]),eval(args[7]),args[8],eval(args[9]),eval(args[10]),))

elif cmd == 'get_session_id_blacklist_count':
  if len(args) != 6:
    print 'get_session_id_blacklist_count requires 6 args'
    sys.exit(1)
  pp.pprint(client.get_session_id_blacklist_count(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'get_session_id_blacklist':
  if len(args) != 11:
    print 'get_session_id_blacklist requires 11 args'
    sys.exit(1)
  pp.pprint(client.get_session_id_blacklist(args[0],args[1],args[2],args[3],args[4],eval(args[5]),eval(args[6]),eval(args[7]),args[8],eval(args[9]),eval(args[10]),))

elif cmd == 'get_session_members_by_role':
  if len(args) != 8:
    print 'get_session_members_by_role requires 8 args'
    sys.exit(1)
  pp.pprint(client.get_session_members_by_role(args[0],eval(args[1]),args[2],eval(args[3]),eval(args[4]),args[5],eval(args[6]),eval(args[7]),))

elif cmd == 'create_session':
  if len(args) != 10:
    print 'create_session requires 10 args'
    sys.exit(1)
  pp.pprint(client.create_session(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],eval(args[9]),))

elif cmd == 'set_subsession_order':
  if len(args) != 4:
    print 'set_subsession_order requires 4 args'
    sys.exit(1)
  pp.pprint(client.set_subsession_order(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'set_session_password':
  if len(args) != 4:
    print 'set_session_password requires 4 args'
    sys.exit(1)
  pp.pprint(client.set_session_password(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'erase_session_password':
  if len(args) != 2:
    print 'erase_session_password requires 2 args'
    sys.exit(1)
  pp.pprint(client.erase_session_password(args[0],eval(args[1]),))

elif cmd == 'enable_autio_high_quality':
  if len(args) != 2:
    print 'enable_autio_high_quality requires 2 args'
    sys.exit(1)
  pp.pprint(client.enable_autio_high_quality(args[0],eval(args[1]),))

elif cmd == 'set_autio_high_quality':
  if len(args) != 3:
    print 'set_autio_high_quality requires 3 args'
    sys.exit(1)
  pp.pprint(client.set_autio_high_quality(args[0],args[1],eval(args[2]),))

elif cmd == 'disable_audio_high_quality':
  if len(args) != 2:
    print 'disable_audio_high_quality requires 2 args'
    sys.exit(1)
  pp.pprint(client.disable_audio_high_quality(args[0],eval(args[1]),))

elif cmd == 'erase_subsession_admin':
  if len(args) != 3:
    print 'erase_subsession_admin requires 3 args'
    sys.exit(1)
  pp.pprint(client.erase_subsession_admin(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'batch_set_session_member_role':
  if len(args) != 4:
    print 'batch_set_session_member_role requires 4 args'
    sys.exit(1)
  pp.pprint(client.batch_set_session_member_role(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'batch_erase_subsession_manager':
  if len(args) != 3:
    print 'batch_erase_subsession_manager requires 3 args'
    sys.exit(1)
  pp.pprint(client.batch_erase_subsession_manager(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'check_global_ban':
  if len(args) != 2:
    print 'check_global_ban requires 2 args'
    sys.exit(1)
  pp.pprint(client.check_global_ban(args[0],eval(args[1]),))

elif cmd == 'check_cookie':
  if len(args) != 4:
    print 'check_cookie requires 4 args'
    sys.exit(1)
  pp.pprint(client.check_cookie(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'batch_erase_session_member':
  if len(args) != 5:
    print 'batch_erase_session_member requires 5 args'
    sys.exit(1)
  pp.pprint(client.batch_erase_session_member(args[0],eval(args[1]),args[2],args[3],eval(args[4]),))

elif cmd == 'erase_session_blacklist':
  if len(args) != 3:
    print 'erase_session_blacklist requires 3 args'
    sys.exit(1)
  pp.pprint(client.erase_session_blacklist(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'batch_erase_session_blacklist_element':
  if len(args) != 4:
    print 'batch_erase_session_blacklist_element requires 4 args'
    sys.exit(1)
  pp.pprint(client.batch_erase_session_blacklist_element(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'set_application_rule':
  if len(args) != 4:
    print 'set_application_rule requires 4 args'
    sys.exit(1)
  pp.pprint(client.set_application_rule(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'get_guild_applications_per_page':
  if len(args) != 7:
    print 'get_guild_applications_per_page requires 7 args'
    sys.exit(1)
  pp.pprint(client.get_guild_applications_per_page(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'get_guild_applications_count':
  if len(args) != 2:
    print 'get_guild_applications_count requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_guild_applications_count(args[0],eval(args[1]),))

elif cmd == 'get_guild_applications_by_uids':
  if len(args) != 4:
    print 'get_guild_applications_by_uids requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_guild_applications_by_uids(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'handle_applications':
  if len(args) != 6:
    print 'handle_applications requires 6 args'
    sys.exit(1)
  pp.pprint(client.handle_applications(args[0],eval(args[1]),args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'get_guild_exited_members_per_page':
  if len(args) != 7:
    print 'get_guild_exited_members_per_page requires 7 args'
    sys.exit(1)
  pp.pprint(client.get_guild_exited_members_per_page(args[0],eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),))

elif cmd == 'get_guild_exited_members_count':
  if len(args) != 2:
    print 'get_guild_exited_members_count requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_guild_exited_members_count(args[0],eval(args[1]),))

elif cmd == 'get_guild_exited_members_by_uids':
  if len(args) != 4:
    print 'get_guild_exited_members_by_uids requires 4 args'
    sys.exit(1)
  pp.pprint(client.get_guild_exited_members_by_uids(args[0],eval(args[1]),eval(args[2]),eval(args[3]),))

elif cmd == 'resume_members':
  if len(args) != 3:
    print 'resume_members requires 3 args'
    sys.exit(1)
  pp.pprint(client.resume_members(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'get_session_gyz':
  if len(args) != 2:
    print 'get_session_gyz requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_gyz(args[0],eval(args[1]),))

elif cmd == 'get_sid_by_asid':
  if len(args) != 2:
    print 'get_sid_by_asid requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_sid_by_asid(args[0],eval(args[1]),))

elif cmd == 'get_session_list_by_ownerid':
  if len(args) != 2:
    print 'get_session_list_by_ownerid requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_session_list_by_ownerid(args[0],eval(args[1]),))

elif cmd == 'batch_get_sub_sessions_info':
  if len(args) != 5:
    print 'batch_get_sub_sessions_info requires 5 args'
    sys.exit(1)
  pp.pprint(client.batch_get_sub_sessions_info(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'get_sub_sessions_count':
  if len(args) != 3:
    print 'get_sub_sessions_count requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_sub_sessions_count(args[0],args[1],eval(args[2]),))

elif cmd == 'set_sub_sessions_order':
  if len(args) != 3:
    print 'set_sub_sessions_order requires 3 args'
    sys.exit(1)
  pp.pprint(client.set_sub_sessions_order(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'reset_account_by_passport':
  if len(args) != 3:
    print 'reset_account_by_passport requires 3 args'
    sys.exit(1)
  pp.pprint(client.reset_account_by_passport(args[0],args[1],eval(args[2]),))

elif cmd == 'reset_passwd_by_passport':
  if len(args) != 3:
    print 'reset_passwd_by_passport requires 3 args'
    sys.exit(1)
  pp.pprint(client.reset_passwd_by_passport(args[0],args[1],eval(args[2]),))

elif cmd == 'validate_user_pwd':
  if len(args) != 6:
    print 'validate_user_pwd requires 6 args'
    sys.exit(1)
  pp.pprint(client.validate_user_pwd(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'validate_user_pwd_by_uid':
  if len(args) != 6:
    print 'validate_user_pwd_by_uid requires 6 args'
    sys.exit(1)
  pp.pprint(client.validate_user_pwd_by_uid(args[0],args[1],args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'get_user_psw':
  if len(args) != 2:
    print 'get_user_psw requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_user_psw(args[0],eval(args[1]),))

transport.close()
