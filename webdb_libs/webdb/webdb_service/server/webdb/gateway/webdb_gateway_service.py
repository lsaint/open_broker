#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
import server.webdb.gateway.webdb_gateway_base_service
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface(server.webdb.gateway.webdb_gateway_base_service.Iface):
  def get_uid(self, passport, cl):
    """
    Parameters:
     - passport
     - cl
    """
    pass

  def get_uid_by_passport(self, passport, cl):
    """
    Parameters:
     - passport
     - cl
    """
    pass

  def active_uid(self, passport, sha1Passwd, ip, nick, cl):
    """
    Parameters:
     - passport
     - sha1Passwd
     - ip
     - nick
     - cl
    """
    pass

  def active_uid_and_imid(self, passport, sha1Passwd, ip, cl):
    """
    Parameters:
     - passport
     - sha1Passwd
     - ip
     - cl
    """
    pass

  def get_uid_by_account(self, account, cl):
    """
    Parameters:
     - account
     - cl
    """
    pass

  def get_session_list(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    pass

  def get_favorite_session_list(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    pass

  def get_session_list_count_by_role(self, uid, role, cl):
    """
    Parameters:
     - uid
     - role
     - cl
    """
    pass

  def get_session_list_by_role(self, uid, role, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - uid
     - role
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    pass

  def batch_get_session_list_by_role(self, uid, roles, order_by, descending, cl):
    """
    Parameters:
     - uid
     - roles
     - order_by
     - descending
     - cl
    """
    pass

  def validate_session_owner(self, sid, uid, cl):
    """
    Parameters:
     - sid
     - uid
     - cl
    """
    pass

  def get_sessions_by_owner(self, ownerid, cl):
    """
    Parameters:
     - ownerid
     - cl
    """
    pass

  def get_session_info(self, sid, columns, cl):
    """
    Parameters:
     - sid
     - columns
     - cl
    """
    pass

  def batch_get_session_info(self, sids, columns, cl):
    """
    Parameters:
     - sids
     - columns
     - cl
    """
    pass

  def get_user_info(self, uid, columns, cl):
    """
    Parameters:
     - uid
     - columns
     - cl
    """
    pass

  def batch_get_user_info(self, uids, columns, cl):
    """
    Parameters:
     - uids
     - columns
     - cl
    """
    pass

  def get_session_score(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def get_session_logo_url(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def batch_get_session_logo_url(self, sids, cl):
    """
    Parameters:
     - sids
     - cl
    """
    pass

  def get_session_asid(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def batch_get_session_asid(self, sids, cl):
    """
    Parameters:
     - sids
     - cl
    """
    pass

  def get_session_member_info(self, sid, uid, columns, cl):
    """
    Parameters:
     - sid
     - uid
     - columns
     - cl
    """
    pass

  def batch_get_member_info_by_session(self, uid, sids, columns, cl):
    """
    Parameters:
     - uid
     - sids
     - columns
     - cl
    """
    pass

  def batch_get_member_info_by_user(self, sid, uids, columns, cl):
    """
    Parameters:
     - sid
     - uids
     - columns
     - cl
    """
    pass

  def get_yy_admin_type(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    pass

  def get_session_count_by_owner(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    pass

  def batch_get_role_by_memberid(self, sid, uids, cl):
    """
    Parameters:
     - sid
     - uids
     - cl
    """
    pass

  def get_session_member_count_by_role(self, sid, roles, cl):
    """
    Parameters:
     - sid
     - roles
     - cl
    """
    pass

  def get_session_regular_member_count(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def get_session_ip_blacklist_count(self, sid, date_from, date_to, reason, uid, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - cl
    """
    pass

  def get_session_ip_blacklist(self, sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    pass

  def get_session_id_blacklist_count(self, sid, date_from, date_to, reason, uid, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - cl
    """
    pass

  def get_session_id_blacklist(self, sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    pass

  def get_session_members_by_role(self, sid, columns, role, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - sid
     - columns
     - role
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    pass

  def create_session(self, sid, name, isp, blimit, bpub, typestr, type, uid, ip, cl):
    """
    Parameters:
     - sid
     - name
     - isp
     - blimit
     - bpub
     - typestr
     - type
     - uid
     - ip
     - cl
    """
    pass

  def set_subsession_order(self, pid, sids, orders, cl):
    """
    Parameters:
     - pid
     - sids
     - orders
     - cl
    """
    pass

  def set_session_password(self, sid, pwd, new_pwd, cl):
    """
    Parameters:
     - sid
     - pwd
     - new_pwd
     - cl
    """
    pass

  def erase_session_password(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def enable_autio_high_quality(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def set_autio_high_quality(self, sid, flag, cl):
    """
    Parameters:
     - sid
     - flag
     - cl
    """
    pass

  def disable_audio_high_quality(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def erase_subsession_admin(self, sid, uids, cl):
    """
    Parameters:
     - sid
     - uids
     - cl
    """
    pass

  def batch_set_session_member_role(self, sid, uids, role, cl):
    """
    Parameters:
     - sid
     - uids
     - role
     - cl
    """
    pass

  def batch_erase_subsession_manager(self, sid, uids, cl):
    """
    Parameters:
     - sid
     - uids
     - cl
    """
    pass

  def check_global_ban(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    pass

  def check_cookie(self, cookie, uid, expirtime, cl):
    """
    Parameters:
     - cookie
     - uid
     - expirtime
     - cl
    """
    pass

  def batch_erase_session_member(self, sid, uids, admin_uid, admin_nick, cl):
    """
    Parameters:
     - sid
     - uids
     - admin_uid
     - admin_nick
     - cl
    """
    pass

  def erase_session_blacklist(self, sid, ban_type, cl):
    """
    Parameters:
     - sid
     - ban_type
     - cl
    """
    pass

  def batch_erase_session_blacklist_element(self, sid, ban_types, uids_ips, cl):
    """
    Parameters:
     - sid
     - ban_types
     - uids_ips
     - cl
    """
    pass

  def set_application_rule(self, sid, request_jifen, app_instru, cl):
    """
    Parameters:
     - sid
     - request_jifen
     - app_instru
     - cl
    """
    pass

  def get_guild_applications_per_page(self, tid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - tid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    pass

  def get_guild_applications_count(self, tid, cl):
    """
    Parameters:
     - tid
     - cl
    """
    pass

  def get_guild_applications_by_uids(self, tid, uids, columns, cl):
    """
    Parameters:
     - tid
     - uids
     - columns
     - cl
    """
    pass

  def handle_applications(self, tid, uids, new_role, admin_uid, admin_nick, cl):
    """
    Parameters:
     - tid
     - uids
     - new_role
     - admin_uid
     - admin_nick
     - cl
    """
    pass

  def get_guild_exited_members_per_page(self, tid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - tid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    pass

  def get_guild_exited_members_count(self, tid, cl):
    """
    Parameters:
     - tid
     - cl
    """
    pass

  def get_guild_exited_members_by_uids(self, tid, uids, columns, cl):
    """
    Parameters:
     - tid
     - uids
     - columns
     - cl
    """
    pass

  def resume_members(self, tid, uids, cl):
    """
    Parameters:
     - tid
     - uids
     - cl
    """
    pass

  def get_session_gyz(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    pass

  def get_sid_by_asid(self, asid, cl):
    """
    Parameters:
     - asid
     - cl
    """
    pass

  def get_session_list_by_ownerid(self, ownerid, cl):
    """
    Parameters:
     - ownerid
     - cl
    """
    pass

  def batch_get_sub_sessions_info(self, tid, pid, columns, full_recursive, cl):
    """
    Parameters:
     - tid
     - pid
     - columns
     - full_recursive
     - cl
    """
    pass

  def get_sub_sessions_count(self, tid, pid, cl):
    """
    Parameters:
     - tid
     - pid
     - cl
    """
    pass

  def set_sub_sessions_order(self, tid, sub_sessions_sort, cl):
    """
    Parameters:
     - tid
     - sub_sessions_sort
     - cl
    """
    pass

  def reset_account_by_passport(self, account, passport, cl):
    """
    Parameters:
     - account
     - passport
     - cl
    """
    pass

  def reset_passwd_by_passport(self, passwd, passport, cl):
    """
    Parameters:
     - passwd
     - passport
     - cl
    """
    pass

  def validate_user_pwd(self, passport, shapasswd, yzm_auth, ip, app_type, cl):
    """
    Parameters:
     - passport
     - shapasswd
     - yzm_auth
     - ip
     - app_type
     - cl
    """
    pass

  def validate_user_pwd_by_uid(self, uid, shapasswd, time, ip, app_type, cl):
    """
    Parameters:
     - uid
     - shapasswd
     - time
     - ip
     - app_type
     - cl
    """
    pass

  def get_user_psw(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    pass


class Client(server.webdb.gateway.webdb_gateway_base_service.Client, Iface):
  def __init__(self, iprot, oprot=None):
    server.webdb.gateway.webdb_gateway_base_service.Client.__init__(self, iprot, oprot)

  def get_uid(self, passport, cl):
    """
    Parameters:
     - passport
     - cl
    """
    self.send_get_uid(passport, cl)
    return self.recv_get_uid()

  def send_get_uid(self, passport, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(passport)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_uid', TMessageType.CALL, self._seqid)
    args = get_uid_args()
    args.passport = passport
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_uid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_uid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_uid failed: unknown result");

  def get_uid_by_passport(self, passport, cl):
    """
    Parameters:
     - passport
     - cl
    """
    self.send_get_uid_by_passport(passport, cl)
    return self.recv_get_uid_by_passport()

  def send_get_uid_by_passport(self, passport, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(passport)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_uid_by_passport', TMessageType.CALL, self._seqid)
    args = get_uid_by_passport_args()
    args.passport = passport
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_uid_by_passport(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_uid_by_passport_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_uid_by_passport failed: unknown result");

  def active_uid(self, passport, sha1Passwd, ip, nick, cl):
    """
    Parameters:
     - passport
     - sha1Passwd
     - ip
     - nick
     - cl
    """
    self.send_active_uid(passport, sha1Passwd, ip, nick, cl)
    return self.recv_active_uid()

  def send_active_uid(self, passport, sha1Passwd, ip, nick, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(passport)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('active_uid', TMessageType.CALL, self._seqid)
    args = active_uid_args()
    args.passport = passport
    args.sha1Passwd = sha1Passwd
    args.ip = ip
    args.nick = nick
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_active_uid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = active_uid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "active_uid failed: unknown result");

  def active_uid_and_imid(self, passport, sha1Passwd, ip, cl):
    """
    Parameters:
     - passport
     - sha1Passwd
     - ip
     - cl
    """
    self.send_active_uid_and_imid(passport, sha1Passwd, ip, cl)
    return self.recv_active_uid_and_imid()

  def send_active_uid_and_imid(self, passport, sha1Passwd, ip, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(passport)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('active_uid_and_imid', TMessageType.CALL, self._seqid)
    args = active_uid_and_imid_args()
    args.passport = passport
    args.sha1Passwd = sha1Passwd
    args.ip = ip
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_active_uid_and_imid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = active_uid_and_imid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "active_uid_and_imid failed: unknown result");

  def get_uid_by_account(self, account, cl):
    """
    Parameters:
     - account
     - cl
    """
    self.send_get_uid_by_account(account, cl)
    return self.recv_get_uid_by_account()

  def send_get_uid_by_account(self, account, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(account)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_uid_by_account', TMessageType.CALL, self._seqid)
    args = get_uid_by_account_args()
    args.account = account
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_uid_by_account(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_uid_by_account_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_uid_by_account failed: unknown result");

  def get_session_list(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    self.send_get_session_list(uid, cl)
    return self.recv_get_session_list()

  def send_get_session_list(self, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_list', TMessageType.CALL, self._seqid)
    args = get_session_list_args()
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_list(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_list_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_list failed: unknown result");

  def get_favorite_session_list(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    self.send_get_favorite_session_list(uid, cl)
    return self.recv_get_favorite_session_list()

  def send_get_favorite_session_list(self, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_favorite_session_list', TMessageType.CALL, self._seqid)
    args = get_favorite_session_list_args()
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_favorite_session_list(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_favorite_session_list_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_favorite_session_list failed: unknown result");

  def get_session_list_count_by_role(self, uid, role, cl):
    """
    Parameters:
     - uid
     - role
     - cl
    """
    self.send_get_session_list_count_by_role(uid, role, cl)
    return self.recv_get_session_list_count_by_role()

  def send_get_session_list_count_by_role(self, uid, role, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_list_count_by_role', TMessageType.CALL, self._seqid)
    args = get_session_list_count_by_role_args()
    args.uid = uid
    args.role = role
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_list_count_by_role(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_list_count_by_role_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_list_count_by_role failed: unknown result");

  def get_session_list_by_role(self, uid, role, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - uid
     - role
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    self.send_get_session_list_by_role(uid, role, page, per_page, order_by, descending, cl)
    return self.recv_get_session_list_by_role()

  def send_get_session_list_by_role(self, uid, role, page, per_page, order_by, descending, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_list_by_role', TMessageType.CALL, self._seqid)
    args = get_session_list_by_role_args()
    args.uid = uid
    args.role = role
    args.page = page
    args.per_page = per_page
    args.order_by = order_by
    args.descending = descending
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_list_by_role(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_list_by_role_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_list_by_role failed: unknown result");

  def batch_get_session_list_by_role(self, uid, roles, order_by, descending, cl):
    """
    Parameters:
     - uid
     - roles
     - order_by
     - descending
     - cl
    """
    self.send_batch_get_session_list_by_role(uid, roles, order_by, descending, cl)
    return self.recv_batch_get_session_list_by_role()

  def send_batch_get_session_list_by_role(self, uid, roles, order_by, descending, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_get_session_list_by_role', TMessageType.CALL, self._seqid)
    args = batch_get_session_list_by_role_args()
    args.uid = uid
    args.roles = roles
    args.order_by = order_by
    args.descending = descending
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_session_list_by_role(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_session_list_by_role_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_session_list_by_role failed: unknown result");

  def validate_session_owner(self, sid, uid, cl):
    """
    Parameters:
     - sid
     - uid
     - cl
    """
    self.send_validate_session_owner(sid, uid, cl)
    return self.recv_validate_session_owner()

  def send_validate_session_owner(self, sid, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('validate_session_owner', TMessageType.CALL, self._seqid)
    args = validate_session_owner_args()
    args.sid = sid
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_validate_session_owner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = validate_session_owner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "validate_session_owner failed: unknown result");

  def get_sessions_by_owner(self, ownerid, cl):
    """
    Parameters:
     - ownerid
     - cl
    """
    self.send_get_sessions_by_owner(ownerid, cl)
    return self.recv_get_sessions_by_owner()

  def send_get_sessions_by_owner(self, ownerid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(ownerid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_sessions_by_owner', TMessageType.CALL, self._seqid)
    args = get_sessions_by_owner_args()
    args.ownerid = ownerid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_sessions_by_owner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_sessions_by_owner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_sessions_by_owner failed: unknown result");

  def get_session_info(self, sid, columns, cl):
    """
    Parameters:
     - sid
     - columns
     - cl
    """
    self.send_get_session_info(sid, columns, cl)
    return self.recv_get_session_info()

  def send_get_session_info(self, sid, columns, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_info', TMessageType.CALL, self._seqid)
    args = get_session_info_args()
    args.sid = sid
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_info failed: unknown result");

  def batch_get_session_info(self, sids, columns, cl):
    """
    Parameters:
     - sids
     - columns
     - cl
    """
    self.send_batch_get_session_info(sids, columns, cl)
    return self.recv_batch_get_session_info()

  def send_batch_get_session_info(self, sids, columns, cl):
    self._oprot.writeMessageBegin('batch_get_session_info', TMessageType.CALL, self._seqid)
    args = batch_get_session_info_args()
    args.sids = sids
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_session_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_session_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_session_info failed: unknown result");

  def get_user_info(self, uid, columns, cl):
    """
    Parameters:
     - uid
     - columns
     - cl
    """
    self.send_get_user_info(uid, columns, cl)
    return self.recv_get_user_info()

  def send_get_user_info(self, uid, columns, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_user_info', TMessageType.CALL, self._seqid)
    args = get_user_info_args()
    args.uid = uid
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_user_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_user_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_user_info failed: unknown result");

  def batch_get_user_info(self, uids, columns, cl):
    """
    Parameters:
     - uids
     - columns
     - cl
    """
    self.send_batch_get_user_info(uids, columns, cl)
    return self.recv_batch_get_user_info()

  def send_batch_get_user_info(self, uids, columns, cl):
    self._oprot.writeMessageBegin('batch_get_user_info', TMessageType.CALL, self._seqid)
    args = batch_get_user_info_args()
    args.uids = uids
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_user_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_user_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_user_info failed: unknown result");

  def get_session_score(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_get_session_score(sid, cl)
    return self.recv_get_session_score()

  def send_get_session_score(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_score', TMessageType.CALL, self._seqid)
    args = get_session_score_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_score(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_score_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_score failed: unknown result");

  def get_session_logo_url(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_get_session_logo_url(sid, cl)
    return self.recv_get_session_logo_url()

  def send_get_session_logo_url(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_logo_url', TMessageType.CALL, self._seqid)
    args = get_session_logo_url_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_logo_url(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_logo_url_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_logo_url failed: unknown result");

  def batch_get_session_logo_url(self, sids, cl):
    """
    Parameters:
     - sids
     - cl
    """
    self.send_batch_get_session_logo_url(sids, cl)
    return self.recv_batch_get_session_logo_url()

  def send_batch_get_session_logo_url(self, sids, cl):
    self._oprot.writeMessageBegin('batch_get_session_logo_url', TMessageType.CALL, self._seqid)
    args = batch_get_session_logo_url_args()
    args.sids = sids
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_session_logo_url(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_session_logo_url_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_session_logo_url failed: unknown result");

  def get_session_asid(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_get_session_asid(sid, cl)
    return self.recv_get_session_asid()

  def send_get_session_asid(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_asid', TMessageType.CALL, self._seqid)
    args = get_session_asid_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_asid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_asid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_asid failed: unknown result");

  def batch_get_session_asid(self, sids, cl):
    """
    Parameters:
     - sids
     - cl
    """
    self.send_batch_get_session_asid(sids, cl)
    return self.recv_batch_get_session_asid()

  def send_batch_get_session_asid(self, sids, cl):
    self._oprot.writeMessageBegin('batch_get_session_asid', TMessageType.CALL, self._seqid)
    args = batch_get_session_asid_args()
    args.sids = sids
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_session_asid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_session_asid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_session_asid failed: unknown result");

  def get_session_member_info(self, sid, uid, columns, cl):
    """
    Parameters:
     - sid
     - uid
     - columns
     - cl
    """
    self.send_get_session_member_info(sid, uid, columns, cl)
    return self.recv_get_session_member_info()

  def send_get_session_member_info(self, sid, uid, columns, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_member_info', TMessageType.CALL, self._seqid)
    args = get_session_member_info_args()
    args.sid = sid
    args.uid = uid
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_member_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_member_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_member_info failed: unknown result");

  def batch_get_member_info_by_session(self, uid, sids, columns, cl):
    """
    Parameters:
     - uid
     - sids
     - columns
     - cl
    """
    self.send_batch_get_member_info_by_session(uid, sids, columns, cl)
    return self.recv_batch_get_member_info_by_session()

  def send_batch_get_member_info_by_session(self, uid, sids, columns, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_get_member_info_by_session', TMessageType.CALL, self._seqid)
    args = batch_get_member_info_by_session_args()
    args.uid = uid
    args.sids = sids
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_member_info_by_session(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_member_info_by_session_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_member_info_by_session failed: unknown result");

  def batch_get_member_info_by_user(self, sid, uids, columns, cl):
    """
    Parameters:
     - sid
     - uids
     - columns
     - cl
    """
    self.send_batch_get_member_info_by_user(sid, uids, columns, cl)
    return self.recv_batch_get_member_info_by_user()

  def send_batch_get_member_info_by_user(self, sid, uids, columns, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_get_member_info_by_user', TMessageType.CALL, self._seqid)
    args = batch_get_member_info_by_user_args()
    args.sid = sid
    args.uids = uids
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_member_info_by_user(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_member_info_by_user_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_member_info_by_user failed: unknown result");

  def get_yy_admin_type(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    self.send_get_yy_admin_type(uid, cl)
    return self.recv_get_yy_admin_type()

  def send_get_yy_admin_type(self, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_yy_admin_type', TMessageType.CALL, self._seqid)
    args = get_yy_admin_type_args()
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_yy_admin_type(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_yy_admin_type_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_yy_admin_type failed: unknown result");

  def get_session_count_by_owner(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    self.send_get_session_count_by_owner(uid, cl)
    return self.recv_get_session_count_by_owner()

  def send_get_session_count_by_owner(self, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_count_by_owner', TMessageType.CALL, self._seqid)
    args = get_session_count_by_owner_args()
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_count_by_owner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_count_by_owner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_count_by_owner failed: unknown result");

  def batch_get_role_by_memberid(self, sid, uids, cl):
    """
    Parameters:
     - sid
     - uids
     - cl
    """
    self.send_batch_get_role_by_memberid(sid, uids, cl)
    return self.recv_batch_get_role_by_memberid()

  def send_batch_get_role_by_memberid(self, sid, uids, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_get_role_by_memberid', TMessageType.CALL, self._seqid)
    args = batch_get_role_by_memberid_args()
    args.sid = sid
    args.uids = uids
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_role_by_memberid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_role_by_memberid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_role_by_memberid failed: unknown result");

  def get_session_member_count_by_role(self, sid, roles, cl):
    """
    Parameters:
     - sid
     - roles
     - cl
    """
    self.send_get_session_member_count_by_role(sid, roles, cl)
    return self.recv_get_session_member_count_by_role()

  def send_get_session_member_count_by_role(self, sid, roles, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_member_count_by_role', TMessageType.CALL, self._seqid)
    args = get_session_member_count_by_role_args()
    args.sid = sid
    args.roles = roles
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_member_count_by_role(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_member_count_by_role_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_member_count_by_role failed: unknown result");

  def get_session_regular_member_count(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_get_session_regular_member_count(sid, cl)
    return self.recv_get_session_regular_member_count()

  def send_get_session_regular_member_count(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_regular_member_count', TMessageType.CALL, self._seqid)
    args = get_session_regular_member_count_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_regular_member_count(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_regular_member_count_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_regular_member_count failed: unknown result");

  def get_session_ip_blacklist_count(self, sid, date_from, date_to, reason, uid, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - cl
    """
    self.send_get_session_ip_blacklist_count(sid, date_from, date_to, reason, uid, cl)
    return self.recv_get_session_ip_blacklist_count()

  def send_get_session_ip_blacklist_count(self, sid, date_from, date_to, reason, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_ip_blacklist_count', TMessageType.CALL, self._seqid)
    args = get_session_ip_blacklist_count_args()
    args.sid = sid
    args.date_from = date_from
    args.date_to = date_to
    args.reason = reason
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_ip_blacklist_count(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_ip_blacklist_count_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_ip_blacklist_count failed: unknown result");

  def get_session_ip_blacklist(self, sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    self.send_get_session_ip_blacklist(sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl)
    return self.recv_get_session_ip_blacklist()

  def send_get_session_ip_blacklist(self, sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_ip_blacklist', TMessageType.CALL, self._seqid)
    args = get_session_ip_blacklist_args()
    args.sid = sid
    args.date_from = date_from
    args.date_to = date_to
    args.reason = reason
    args.uid = uid
    args.columns = columns
    args.page = page
    args.per_page = per_page
    args.order_by = order_by
    args.descending = descending
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_ip_blacklist(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_ip_blacklist_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_ip_blacklist failed: unknown result");

  def get_session_id_blacklist_count(self, sid, date_from, date_to, reason, uid, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - cl
    """
    self.send_get_session_id_blacklist_count(sid, date_from, date_to, reason, uid, cl)
    return self.recv_get_session_id_blacklist_count()

  def send_get_session_id_blacklist_count(self, sid, date_from, date_to, reason, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_id_blacklist_count', TMessageType.CALL, self._seqid)
    args = get_session_id_blacklist_count_args()
    args.sid = sid
    args.date_from = date_from
    args.date_to = date_to
    args.reason = reason
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_id_blacklist_count(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_id_blacklist_count_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_id_blacklist_count failed: unknown result");

  def get_session_id_blacklist(self, sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - sid
     - date_from
     - date_to
     - reason
     - uid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    self.send_get_session_id_blacklist(sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl)
    return self.recv_get_session_id_blacklist()

  def send_get_session_id_blacklist(self, sid, date_from, date_to, reason, uid, columns, page, per_page, order_by, descending, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_id_blacklist', TMessageType.CALL, self._seqid)
    args = get_session_id_blacklist_args()
    args.sid = sid
    args.date_from = date_from
    args.date_to = date_to
    args.reason = reason
    args.uid = uid
    args.columns = columns
    args.page = page
    args.per_page = per_page
    args.order_by = order_by
    args.descending = descending
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_id_blacklist(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_id_blacklist_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_id_blacklist failed: unknown result");

  def get_session_members_by_role(self, sid, columns, role, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - sid
     - columns
     - role
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    self.send_get_session_members_by_role(sid, columns, role, page, per_page, order_by, descending, cl)
    return self.recv_get_session_members_by_role()

  def send_get_session_members_by_role(self, sid, columns, role, page, per_page, order_by, descending, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_members_by_role', TMessageType.CALL, self._seqid)
    args = get_session_members_by_role_args()
    args.sid = sid
    args.columns = columns
    args.role = role
    args.page = page
    args.per_page = per_page
    args.order_by = order_by
    args.descending = descending
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_members_by_role(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_members_by_role_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_members_by_role failed: unknown result");

  def create_session(self, sid, name, isp, blimit, bpub, typestr, type, uid, ip, cl):
    """
    Parameters:
     - sid
     - name
     - isp
     - blimit
     - bpub
     - typestr
     - type
     - uid
     - ip
     - cl
    """
    self.send_create_session(sid, name, isp, blimit, bpub, typestr, type, uid, ip, cl)
    return self.recv_create_session()

  def send_create_session(self, sid, name, isp, blimit, bpub, typestr, type, uid, ip, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('create_session', TMessageType.CALL, self._seqid)
    args = create_session_args()
    args.sid = sid
    args.name = name
    args.isp = isp
    args.blimit = blimit
    args.bpub = bpub
    args.typestr = typestr
    args.type = type
    args.uid = uid
    args.ip = ip
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_create_session(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = create_session_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "create_session failed: unknown result");

  def set_subsession_order(self, pid, sids, orders, cl):
    """
    Parameters:
     - pid
     - sids
     - orders
     - cl
    """
    self.send_set_subsession_order(pid, sids, orders, cl)
    return self.recv_set_subsession_order()

  def send_set_subsession_order(self, pid, sids, orders, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(pid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('set_subsession_order', TMessageType.CALL, self._seqid)
    args = set_subsession_order_args()
    args.pid = pid
    args.sids = sids
    args.orders = orders
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_subsession_order(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_subsession_order_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_subsession_order failed: unknown result");

  def set_session_password(self, sid, pwd, new_pwd, cl):
    """
    Parameters:
     - sid
     - pwd
     - new_pwd
     - cl
    """
    self.send_set_session_password(sid, pwd, new_pwd, cl)
    return self.recv_set_session_password()

  def send_set_session_password(self, sid, pwd, new_pwd, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('set_session_password', TMessageType.CALL, self._seqid)
    args = set_session_password_args()
    args.sid = sid
    args.pwd = pwd
    args.new_pwd = new_pwd
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_session_password(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_session_password_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_session_password failed: unknown result");

  def erase_session_password(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_erase_session_password(sid, cl)
    return self.recv_erase_session_password()

  def send_erase_session_password(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('erase_session_password', TMessageType.CALL, self._seqid)
    args = erase_session_password_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_erase_session_password(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = erase_session_password_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "erase_session_password failed: unknown result");

  def enable_autio_high_quality(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_enable_autio_high_quality(sid, cl)
    return self.recv_enable_autio_high_quality()

  def send_enable_autio_high_quality(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('enable_autio_high_quality', TMessageType.CALL, self._seqid)
    args = enable_autio_high_quality_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enable_autio_high_quality(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enable_autio_high_quality_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "enable_autio_high_quality failed: unknown result");

  def set_autio_high_quality(self, sid, flag, cl):
    """
    Parameters:
     - sid
     - flag
     - cl
    """
    self.send_set_autio_high_quality(sid, flag, cl)
    return self.recv_set_autio_high_quality()

  def send_set_autio_high_quality(self, sid, flag, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('set_autio_high_quality', TMessageType.CALL, self._seqid)
    args = set_autio_high_quality_args()
    args.sid = sid
    args.flag = flag
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_autio_high_quality(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_autio_high_quality_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_autio_high_quality failed: unknown result");

  def disable_audio_high_quality(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_disable_audio_high_quality(sid, cl)
    return self.recv_disable_audio_high_quality()

  def send_disable_audio_high_quality(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('disable_audio_high_quality', TMessageType.CALL, self._seqid)
    args = disable_audio_high_quality_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_disable_audio_high_quality(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = disable_audio_high_quality_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "disable_audio_high_quality failed: unknown result");

  def erase_subsession_admin(self, sid, uids, cl):
    """
    Parameters:
     - sid
     - uids
     - cl
    """
    self.send_erase_subsession_admin(sid, uids, cl)
    return self.recv_erase_subsession_admin()

  def send_erase_subsession_admin(self, sid, uids, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('erase_subsession_admin', TMessageType.CALL, self._seqid)
    args = erase_subsession_admin_args()
    args.sid = sid
    args.uids = uids
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_erase_subsession_admin(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = erase_subsession_admin_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "erase_subsession_admin failed: unknown result");

  def batch_set_session_member_role(self, sid, uids, role, cl):
    """
    Parameters:
     - sid
     - uids
     - role
     - cl
    """
    self.send_batch_set_session_member_role(sid, uids, role, cl)
    return self.recv_batch_set_session_member_role()

  def send_batch_set_session_member_role(self, sid, uids, role, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_set_session_member_role', TMessageType.CALL, self._seqid)
    args = batch_set_session_member_role_args()
    args.sid = sid
    args.uids = uids
    args.role = role
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_set_session_member_role(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_set_session_member_role_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_set_session_member_role failed: unknown result");

  def batch_erase_subsession_manager(self, sid, uids, cl):
    """
    Parameters:
     - sid
     - uids
     - cl
    """
    self.send_batch_erase_subsession_manager(sid, uids, cl)
    return self.recv_batch_erase_subsession_manager()

  def send_batch_erase_subsession_manager(self, sid, uids, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_erase_subsession_manager', TMessageType.CALL, self._seqid)
    args = batch_erase_subsession_manager_args()
    args.sid = sid
    args.uids = uids
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_erase_subsession_manager(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_erase_subsession_manager_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_erase_subsession_manager failed: unknown result");

  def check_global_ban(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    self.send_check_global_ban(uid, cl)
    return self.recv_check_global_ban()

  def send_check_global_ban(self, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('check_global_ban', TMessageType.CALL, self._seqid)
    args = check_global_ban_args()
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_check_global_ban(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = check_global_ban_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "check_global_ban failed: unknown result");

  def check_cookie(self, cookie, uid, expirtime, cl):
    """
    Parameters:
     - cookie
     - uid
     - expirtime
     - cl
    """
    self.send_check_cookie(cookie, uid, expirtime, cl)
    return self.recv_check_cookie()

  def send_check_cookie(self, cookie, uid, expirtime, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('check_cookie', TMessageType.CALL, self._seqid)
    args = check_cookie_args()
    args.cookie = cookie
    args.uid = uid
    args.expirtime = expirtime
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_check_cookie(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = check_cookie_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "check_cookie failed: unknown result");

  def batch_erase_session_member(self, sid, uids, admin_uid, admin_nick, cl):
    """
    Parameters:
     - sid
     - uids
     - admin_uid
     - admin_nick
     - cl
    """
    self.send_batch_erase_session_member(sid, uids, admin_uid, admin_nick, cl)
    return self.recv_batch_erase_session_member()

  def send_batch_erase_session_member(self, sid, uids, admin_uid, admin_nick, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_erase_session_member', TMessageType.CALL, self._seqid)
    args = batch_erase_session_member_args()
    args.sid = sid
    args.uids = uids
    args.admin_uid = admin_uid
    args.admin_nick = admin_nick
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_erase_session_member(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_erase_session_member_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_erase_session_member failed: unknown result");

  def erase_session_blacklist(self, sid, ban_type, cl):
    """
    Parameters:
     - sid
     - ban_type
     - cl
    """
    self.send_erase_session_blacklist(sid, ban_type, cl)
    return self.recv_erase_session_blacklist()

  def send_erase_session_blacklist(self, sid, ban_type, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('erase_session_blacklist', TMessageType.CALL, self._seqid)
    args = erase_session_blacklist_args()
    args.sid = sid
    args.ban_type = ban_type
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_erase_session_blacklist(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = erase_session_blacklist_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "erase_session_blacklist failed: unknown result");

  def batch_erase_session_blacklist_element(self, sid, ban_types, uids_ips, cl):
    """
    Parameters:
     - sid
     - ban_types
     - uids_ips
     - cl
    """
    self.send_batch_erase_session_blacklist_element(sid, ban_types, uids_ips, cl)
    return self.recv_batch_erase_session_blacklist_element()

  def send_batch_erase_session_blacklist_element(self, sid, ban_types, uids_ips, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_erase_session_blacklist_element', TMessageType.CALL, self._seqid)
    args = batch_erase_session_blacklist_element_args()
    args.sid = sid
    args.ban_types = ban_types
    args.uids_ips = uids_ips
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_erase_session_blacklist_element(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_erase_session_blacklist_element_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_erase_session_blacklist_element failed: unknown result");

  def set_application_rule(self, sid, request_jifen, app_instru, cl):
    """
    Parameters:
     - sid
     - request_jifen
     - app_instru
     - cl
    """
    self.send_set_application_rule(sid, request_jifen, app_instru, cl)
    return self.recv_set_application_rule()

  def send_set_application_rule(self, sid, request_jifen, app_instru, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('set_application_rule', TMessageType.CALL, self._seqid)
    args = set_application_rule_args()
    args.sid = sid
    args.request_jifen = request_jifen
    args.app_instru = app_instru
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_application_rule(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_application_rule_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_application_rule failed: unknown result");

  def get_guild_applications_per_page(self, tid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - tid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    self.send_get_guild_applications_per_page(tid, columns, page, per_page, order_by, descending, cl)
    return self.recv_get_guild_applications_per_page()

  def send_get_guild_applications_per_page(self, tid, columns, page, per_page, order_by, descending, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_guild_applications_per_page', TMessageType.CALL, self._seqid)
    args = get_guild_applications_per_page_args()
    args.tid = tid
    args.columns = columns
    args.page = page
    args.per_page = per_page
    args.order_by = order_by
    args.descending = descending
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_guild_applications_per_page(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_guild_applications_per_page_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_guild_applications_per_page failed: unknown result");

  def get_guild_applications_count(self, tid, cl):
    """
    Parameters:
     - tid
     - cl
    """
    self.send_get_guild_applications_count(tid, cl)
    return self.recv_get_guild_applications_count()

  def send_get_guild_applications_count(self, tid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_guild_applications_count', TMessageType.CALL, self._seqid)
    args = get_guild_applications_count_args()
    args.tid = tid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_guild_applications_count(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_guild_applications_count_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_guild_applications_count failed: unknown result");

  def get_guild_applications_by_uids(self, tid, uids, columns, cl):
    """
    Parameters:
     - tid
     - uids
     - columns
     - cl
    """
    self.send_get_guild_applications_by_uids(tid, uids, columns, cl)
    return self.recv_get_guild_applications_by_uids()

  def send_get_guild_applications_by_uids(self, tid, uids, columns, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_guild_applications_by_uids', TMessageType.CALL, self._seqid)
    args = get_guild_applications_by_uids_args()
    args.tid = tid
    args.uids = uids
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_guild_applications_by_uids(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_guild_applications_by_uids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_guild_applications_by_uids failed: unknown result");

  def handle_applications(self, tid, uids, new_role, admin_uid, admin_nick, cl):
    """
    Parameters:
     - tid
     - uids
     - new_role
     - admin_uid
     - admin_nick
     - cl
    """
    self.send_handle_applications(tid, uids, new_role, admin_uid, admin_nick, cl)
    return self.recv_handle_applications()

  def send_handle_applications(self, tid, uids, new_role, admin_uid, admin_nick, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('handle_applications', TMessageType.CALL, self._seqid)
    args = handle_applications_args()
    args.tid = tid
    args.uids = uids
    args.new_role = new_role
    args.admin_uid = admin_uid
    args.admin_nick = admin_nick
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_handle_applications(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = handle_applications_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "handle_applications failed: unknown result");

  def get_guild_exited_members_per_page(self, tid, columns, page, per_page, order_by, descending, cl):
    """
    Parameters:
     - tid
     - columns
     - page
     - per_page
     - order_by
     - descending
     - cl
    """
    self.send_get_guild_exited_members_per_page(tid, columns, page, per_page, order_by, descending, cl)
    return self.recv_get_guild_exited_members_per_page()

  def send_get_guild_exited_members_per_page(self, tid, columns, page, per_page, order_by, descending, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_guild_exited_members_per_page', TMessageType.CALL, self._seqid)
    args = get_guild_exited_members_per_page_args()
    args.tid = tid
    args.columns = columns
    args.page = page
    args.per_page = per_page
    args.order_by = order_by
    args.descending = descending
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_guild_exited_members_per_page(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_guild_exited_members_per_page_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_guild_exited_members_per_page failed: unknown result");

  def get_guild_exited_members_count(self, tid, cl):
    """
    Parameters:
     - tid
     - cl
    """
    self.send_get_guild_exited_members_count(tid, cl)
    return self.recv_get_guild_exited_members_count()

  def send_get_guild_exited_members_count(self, tid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_guild_exited_members_count', TMessageType.CALL, self._seqid)
    args = get_guild_exited_members_count_args()
    args.tid = tid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_guild_exited_members_count(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_guild_exited_members_count_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_guild_exited_members_count failed: unknown result");

  def get_guild_exited_members_by_uids(self, tid, uids, columns, cl):
    """
    Parameters:
     - tid
     - uids
     - columns
     - cl
    """
    self.send_get_guild_exited_members_by_uids(tid, uids, columns, cl)
    return self.recv_get_guild_exited_members_by_uids()

  def send_get_guild_exited_members_by_uids(self, tid, uids, columns, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_guild_exited_members_by_uids', TMessageType.CALL, self._seqid)
    args = get_guild_exited_members_by_uids_args()
    args.tid = tid
    args.uids = uids
    args.columns = columns
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_guild_exited_members_by_uids(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_guild_exited_members_by_uids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_guild_exited_members_by_uids failed: unknown result");

  def resume_members(self, tid, uids, cl):
    """
    Parameters:
     - tid
     - uids
     - cl
    """
    self.send_resume_members(tid, uids, cl)
    return self.recv_resume_members()

  def send_resume_members(self, tid, uids, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('resume_members', TMessageType.CALL, self._seqid)
    args = resume_members_args()
    args.tid = tid
    args.uids = uids
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_resume_members(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = resume_members_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "resume_members failed: unknown result");

  def get_session_gyz(self, sid, cl):
    """
    Parameters:
     - sid
     - cl
    """
    self.send_get_session_gyz(sid, cl)
    return self.recv_get_session_gyz()

  def send_get_session_gyz(self, sid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(sid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_gyz', TMessageType.CALL, self._seqid)
    args = get_session_gyz_args()
    args.sid = sid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_gyz(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_gyz_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_gyz failed: unknown result");

  def get_sid_by_asid(self, asid, cl):
    """
    Parameters:
     - asid
     - cl
    """
    self.send_get_sid_by_asid(asid, cl)
    return self.recv_get_sid_by_asid()

  def send_get_sid_by_asid(self, asid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(asid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_sid_by_asid', TMessageType.CALL, self._seqid)
    args = get_sid_by_asid_args()
    args.asid = asid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_sid_by_asid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_sid_by_asid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_sid_by_asid failed: unknown result");

  def get_session_list_by_ownerid(self, ownerid, cl):
    """
    Parameters:
     - ownerid
     - cl
    """
    self.send_get_session_list_by_ownerid(ownerid, cl)
    return self.recv_get_session_list_by_ownerid()

  def send_get_session_list_by_ownerid(self, ownerid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(ownerid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_session_list_by_ownerid', TMessageType.CALL, self._seqid)
    args = get_session_list_by_ownerid_args()
    args.ownerid = ownerid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_session_list_by_ownerid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_session_list_by_ownerid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_session_list_by_ownerid failed: unknown result");

  def batch_get_sub_sessions_info(self, tid, pid, columns, full_recursive, cl):
    """
    Parameters:
     - tid
     - pid
     - columns
     - full_recursive
     - cl
    """
    self.send_batch_get_sub_sessions_info(tid, pid, columns, full_recursive, cl)
    return self.recv_batch_get_sub_sessions_info()

  def send_batch_get_sub_sessions_info(self, tid, pid, columns, full_recursive, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('batch_get_sub_sessions_info', TMessageType.CALL, self._seqid)
    args = batch_get_sub_sessions_info_args()
    args.tid = tid
    args.pid = pid
    args.columns = columns
    args.full_recursive = full_recursive
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batch_get_sub_sessions_info(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batch_get_sub_sessions_info_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batch_get_sub_sessions_info failed: unknown result");

  def get_sub_sessions_count(self, tid, pid, cl):
    """
    Parameters:
     - tid
     - pid
     - cl
    """
    self.send_get_sub_sessions_count(tid, pid, cl)
    return self.recv_get_sub_sessions_count()

  def send_get_sub_sessions_count(self, tid, pid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_sub_sessions_count', TMessageType.CALL, self._seqid)
    args = get_sub_sessions_count_args()
    args.tid = tid
    args.pid = pid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_sub_sessions_count(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_sub_sessions_count_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_sub_sessions_count failed: unknown result");

  def set_sub_sessions_order(self, tid, sub_sessions_sort, cl):
    """
    Parameters:
     - tid
     - sub_sessions_sort
     - cl
    """
    self.send_set_sub_sessions_order(tid, sub_sessions_sort, cl)
    return self.recv_set_sub_sessions_order()

  def send_set_sub_sessions_order(self, tid, sub_sessions_sort, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(tid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('set_sub_sessions_order', TMessageType.CALL, self._seqid)
    args = set_sub_sessions_order_args()
    args.tid = tid
    args.sub_sessions_sort = sub_sessions_sort
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_sub_sessions_order(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_sub_sessions_order_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "set_sub_sessions_order failed: unknown result");

  def reset_account_by_passport(self, account, passport, cl):
    """
    Parameters:
     - account
     - passport
     - cl
    """
    self.send_reset_account_by_passport(account, passport, cl)
    return self.recv_reset_account_by_passport()

  def send_reset_account_by_passport(self, account, passport, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(passport)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('reset_account_by_passport', TMessageType.CALL, self._seqid)
    args = reset_account_by_passport_args()
    args.account = account
    args.passport = passport
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reset_account_by_passport(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reset_account_by_passport_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reset_account_by_passport failed: unknown result");

  def reset_passwd_by_passport(self, passwd, passport, cl):
    """
    Parameters:
     - passwd
     - passport
     - cl
    """
    self.send_reset_passwd_by_passport(passwd, passport, cl)
    return self.recv_reset_passwd_by_passport()

  def send_reset_passwd_by_passport(self, passwd, passport, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(passport)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('reset_passwd_by_passport', TMessageType.CALL, self._seqid)
    args = reset_passwd_by_passport_args()
    args.passwd = passwd
    args.passport = passport
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reset_passwd_by_passport(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reset_passwd_by_passport_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reset_passwd_by_passport failed: unknown result");

  def validate_user_pwd(self, passport, shapasswd, yzm_auth, ip, app_type, cl):
    """
    Parameters:
     - passport
     - shapasswd
     - yzm_auth
     - ip
     - app_type
     - cl
    """
    self.send_validate_user_pwd(passport, shapasswd, yzm_auth, ip, app_type, cl)
    return self.recv_validate_user_pwd()

  def send_validate_user_pwd(self, passport, shapasswd, yzm_auth, ip, app_type, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(passport)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('validate_user_pwd', TMessageType.CALL, self._seqid)
    args = validate_user_pwd_args()
    args.passport = passport
    args.shapasswd = shapasswd
    args.yzm_auth = yzm_auth
    args.ip = ip
    args.app_type = app_type
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_validate_user_pwd(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = validate_user_pwd_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "validate_user_pwd failed: unknown result");

  def validate_user_pwd_by_uid(self, uid, shapasswd, time, ip, app_type, cl):
    """
    Parameters:
     - uid
     - shapasswd
     - time
     - ip
     - app_type
     - cl
    """
    self.send_validate_user_pwd_by_uid(uid, shapasswd, time, ip, app_type, cl)
    return self.recv_validate_user_pwd_by_uid()

  def send_validate_user_pwd_by_uid(self, uid, shapasswd, time, ip, app_type, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('validate_user_pwd_by_uid', TMessageType.CALL, self._seqid)
    args = validate_user_pwd_by_uid_args()
    args.uid = uid
    args.shapasswd = shapasswd
    args.time = time
    args.ip = ip
    args.app_type = app_type
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_validate_user_pwd_by_uid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = validate_user_pwd_by_uid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "validate_user_pwd_by_uid failed: unknown result");

  def get_user_psw(self, uid, cl):
    """
    Parameters:
     - uid
     - cl
    """
    self.send_get_user_psw(uid, cl)
    return self.recv_get_user_psw()

  def send_get_user_psw(self, uid, cl):
    self._oprot.writeMessageBegin('YYROUTE', TMessageType.CALL, self._seqid)
    self._oprot.writeStructBegin('route_key')
    self._oprot.writeFieldBegin('key', TType.STRING, 1)
    self._oprot.writeString(uid)
    self._oprot.writeFieldEnd()
    self._oprot.writeFieldStop()
    self._oprot.writeStructEnd()
    self._oprot.writeMessageEnd()
    self._oprot.writeMessageBegin('get_user_psw', TMessageType.CALL, self._seqid)
    args = get_user_psw_args()
    args.uid = uid
    args.cl = cl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_user_psw(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_user_psw_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.ex != None:
      raise result.ex
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_user_psw failed: unknown result");


class Processor(server.webdb.gateway.webdb_gateway_base_service.Processor, Iface, TProcessor):
  def __init__(self, handler):
    server.webdb.gateway.webdb_gateway_base_service.Processor.__init__(self, handler)
    self._processMap["get_uid"] = Processor.process_get_uid
    self._processMap["get_uid_by_passport"] = Processor.process_get_uid_by_passport
    self._processMap["active_uid"] = Processor.process_active_uid
    self._processMap["active_uid_and_imid"] = Processor.process_active_uid_and_imid
    self._processMap["get_uid_by_account"] = Processor.process_get_uid_by_account
    self._processMap["get_session_list"] = Processor.process_get_session_list
    self._processMap["get_favorite_session_list"] = Processor.process_get_favorite_session_list
    self._processMap["get_session_list_count_by_role"] = Processor.process_get_session_list_count_by_role
    self._processMap["get_session_list_by_role"] = Processor.process_get_session_list_by_role
    self._processMap["batch_get_session_list_by_role"] = Processor.process_batch_get_session_list_by_role
    self._processMap["validate_session_owner"] = Processor.process_validate_session_owner
    self._processMap["get_sessions_by_owner"] = Processor.process_get_sessions_by_owner
    self._processMap["get_session_info"] = Processor.process_get_session_info
    self._processMap["batch_get_session_info"] = Processor.process_batch_get_session_info
    self._processMap["get_user_info"] = Processor.process_get_user_info
    self._processMap["batch_get_user_info"] = Processor.process_batch_get_user_info
    self._processMap["get_session_score"] = Processor.process_get_session_score
    self._processMap["get_session_logo_url"] = Processor.process_get_session_logo_url
    self._processMap["batch_get_session_logo_url"] = Processor.process_batch_get_session_logo_url
    self._processMap["get_session_asid"] = Processor.process_get_session_asid
    self._processMap["batch_get_session_asid"] = Processor.process_batch_get_session_asid
    self._processMap["get_session_member_info"] = Processor.process_get_session_member_info
    self._processMap["batch_get_member_info_by_session"] = Processor.process_batch_get_member_info_by_session
    self._processMap["batch_get_member_info_by_user"] = Processor.process_batch_get_member_info_by_user
    self._processMap["get_yy_admin_type"] = Processor.process_get_yy_admin_type
    self._processMap["get_session_count_by_owner"] = Processor.process_get_session_count_by_owner
    self._processMap["batch_get_role_by_memberid"] = Processor.process_batch_get_role_by_memberid
    self._processMap["get_session_member_count_by_role"] = Processor.process_get_session_member_count_by_role
    self._processMap["get_session_regular_member_count"] = Processor.process_get_session_regular_member_count
    self._processMap["get_session_ip_blacklist_count"] = Processor.process_get_session_ip_blacklist_count
    self._processMap["get_session_ip_blacklist"] = Processor.process_get_session_ip_blacklist
    self._processMap["get_session_id_blacklist_count"] = Processor.process_get_session_id_blacklist_count
    self._processMap["get_session_id_blacklist"] = Processor.process_get_session_id_blacklist
    self._processMap["get_session_members_by_role"] = Processor.process_get_session_members_by_role
    self._processMap["create_session"] = Processor.process_create_session
    self._processMap["set_subsession_order"] = Processor.process_set_subsession_order
    self._processMap["set_session_password"] = Processor.process_set_session_password
    self._processMap["erase_session_password"] = Processor.process_erase_session_password
    self._processMap["enable_autio_high_quality"] = Processor.process_enable_autio_high_quality
    self._processMap["set_autio_high_quality"] = Processor.process_set_autio_high_quality
    self._processMap["disable_audio_high_quality"] = Processor.process_disable_audio_high_quality
    self._processMap["erase_subsession_admin"] = Processor.process_erase_subsession_admin
    self._processMap["batch_set_session_member_role"] = Processor.process_batch_set_session_member_role
    self._processMap["batch_erase_subsession_manager"] = Processor.process_batch_erase_subsession_manager
    self._processMap["check_global_ban"] = Processor.process_check_global_ban
    self._processMap["check_cookie"] = Processor.process_check_cookie
    self._processMap["batch_erase_session_member"] = Processor.process_batch_erase_session_member
    self._processMap["erase_session_blacklist"] = Processor.process_erase_session_blacklist
    self._processMap["batch_erase_session_blacklist_element"] = Processor.process_batch_erase_session_blacklist_element
    self._processMap["set_application_rule"] = Processor.process_set_application_rule
    self._processMap["get_guild_applications_per_page"] = Processor.process_get_guild_applications_per_page
    self._processMap["get_guild_applications_count"] = Processor.process_get_guild_applications_count
    self._processMap["get_guild_applications_by_uids"] = Processor.process_get_guild_applications_by_uids
    self._processMap["handle_applications"] = Processor.process_handle_applications
    self._processMap["get_guild_exited_members_per_page"] = Processor.process_get_guild_exited_members_per_page
    self._processMap["get_guild_exited_members_count"] = Processor.process_get_guild_exited_members_count
    self._processMap["get_guild_exited_members_by_uids"] = Processor.process_get_guild_exited_members_by_uids
    self._processMap["resume_members"] = Processor.process_resume_members
    self._processMap["get_session_gyz"] = Processor.process_get_session_gyz
    self._processMap["get_sid_by_asid"] = Processor.process_get_sid_by_asid
    self._processMap["get_session_list_by_ownerid"] = Processor.process_get_session_list_by_ownerid
    self._processMap["batch_get_sub_sessions_info"] = Processor.process_batch_get_sub_sessions_info
    self._processMap["get_sub_sessions_count"] = Processor.process_get_sub_sessions_count
    self._processMap["set_sub_sessions_order"] = Processor.process_set_sub_sessions_order
    self._processMap["reset_account_by_passport"] = Processor.process_reset_account_by_passport
    self._processMap["reset_passwd_by_passport"] = Processor.process_reset_passwd_by_passport
    self._processMap["validate_user_pwd"] = Processor.process_validate_user_pwd
    self._processMap["validate_user_pwd_by_uid"] = Processor.process_validate_user_pwd_by_uid
    self._processMap["get_user_psw"] = Processor.process_get_user_psw

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_get_uid(self, seqid, iprot, oprot):
    args = get_uid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_uid_result()
    try:
      result.success = self._handler.get_uid(args.passport, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_uid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_uid_by_passport(self, seqid, iprot, oprot):
    args = get_uid_by_passport_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_uid_by_passport_result()
    try:
      result.success = self._handler.get_uid_by_passport(args.passport, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_uid_by_passport", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_active_uid(self, seqid, iprot, oprot):
    args = active_uid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = active_uid_result()
    try:
      result.success = self._handler.active_uid(args.passport, args.sha1Passwd, args.ip, args.nick, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("active_uid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_active_uid_and_imid(self, seqid, iprot, oprot):
    args = active_uid_and_imid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = active_uid_and_imid_result()
    try:
      result.success = self._handler.active_uid_and_imid(args.passport, args.sha1Passwd, args.ip, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("active_uid_and_imid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_uid_by_account(self, seqid, iprot, oprot):
    args = get_uid_by_account_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_uid_by_account_result()
    try:
      result.success = self._handler.get_uid_by_account(args.account, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_uid_by_account", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_list(self, seqid, iprot, oprot):
    args = get_session_list_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_list_result()
    try:
      result.success = self._handler.get_session_list(args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_list", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_favorite_session_list(self, seqid, iprot, oprot):
    args = get_favorite_session_list_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_favorite_session_list_result()
    try:
      result.success = self._handler.get_favorite_session_list(args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_favorite_session_list", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_list_count_by_role(self, seqid, iprot, oprot):
    args = get_session_list_count_by_role_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_list_count_by_role_result()
    try:
      result.success = self._handler.get_session_list_count_by_role(args.uid, args.role, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_list_count_by_role", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_list_by_role(self, seqid, iprot, oprot):
    args = get_session_list_by_role_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_list_by_role_result()
    try:
      result.success = self._handler.get_session_list_by_role(args.uid, args.role, args.page, args.per_page, args.order_by, args.descending, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_list_by_role", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_session_list_by_role(self, seqid, iprot, oprot):
    args = batch_get_session_list_by_role_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_session_list_by_role_result()
    try:
      result.success = self._handler.batch_get_session_list_by_role(args.uid, args.roles, args.order_by, args.descending, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_session_list_by_role", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_validate_session_owner(self, seqid, iprot, oprot):
    args = validate_session_owner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = validate_session_owner_result()
    try:
      result.success = self._handler.validate_session_owner(args.sid, args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("validate_session_owner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_sessions_by_owner(self, seqid, iprot, oprot):
    args = get_sessions_by_owner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_sessions_by_owner_result()
    try:
      result.success = self._handler.get_sessions_by_owner(args.ownerid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_sessions_by_owner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_info(self, seqid, iprot, oprot):
    args = get_session_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_info_result()
    try:
      result.success = self._handler.get_session_info(args.sid, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_session_info(self, seqid, iprot, oprot):
    args = batch_get_session_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_session_info_result()
    try:
      result.success = self._handler.batch_get_session_info(args.sids, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_session_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_user_info(self, seqid, iprot, oprot):
    args = get_user_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_user_info_result()
    try:
      result.success = self._handler.get_user_info(args.uid, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_user_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_user_info(self, seqid, iprot, oprot):
    args = batch_get_user_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_user_info_result()
    try:
      result.success = self._handler.batch_get_user_info(args.uids, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_user_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_score(self, seqid, iprot, oprot):
    args = get_session_score_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_score_result()
    try:
      result.success = self._handler.get_session_score(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_score", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_logo_url(self, seqid, iprot, oprot):
    args = get_session_logo_url_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_logo_url_result()
    try:
      result.success = self._handler.get_session_logo_url(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_logo_url", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_session_logo_url(self, seqid, iprot, oprot):
    args = batch_get_session_logo_url_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_session_logo_url_result()
    try:
      result.success = self._handler.batch_get_session_logo_url(args.sids, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_session_logo_url", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_asid(self, seqid, iprot, oprot):
    args = get_session_asid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_asid_result()
    try:
      result.success = self._handler.get_session_asid(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_asid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_session_asid(self, seqid, iprot, oprot):
    args = batch_get_session_asid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_session_asid_result()
    try:
      result.success = self._handler.batch_get_session_asid(args.sids, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_session_asid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_member_info(self, seqid, iprot, oprot):
    args = get_session_member_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_member_info_result()
    try:
      result.success = self._handler.get_session_member_info(args.sid, args.uid, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_member_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_member_info_by_session(self, seqid, iprot, oprot):
    args = batch_get_member_info_by_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_member_info_by_session_result()
    try:
      result.success = self._handler.batch_get_member_info_by_session(args.uid, args.sids, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_member_info_by_session", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_member_info_by_user(self, seqid, iprot, oprot):
    args = batch_get_member_info_by_user_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_member_info_by_user_result()
    try:
      result.success = self._handler.batch_get_member_info_by_user(args.sid, args.uids, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_member_info_by_user", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_yy_admin_type(self, seqid, iprot, oprot):
    args = get_yy_admin_type_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_yy_admin_type_result()
    try:
      result.success = self._handler.get_yy_admin_type(args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_yy_admin_type", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_count_by_owner(self, seqid, iprot, oprot):
    args = get_session_count_by_owner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_count_by_owner_result()
    try:
      result.success = self._handler.get_session_count_by_owner(args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_count_by_owner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_role_by_memberid(self, seqid, iprot, oprot):
    args = batch_get_role_by_memberid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_role_by_memberid_result()
    try:
      result.success = self._handler.batch_get_role_by_memberid(args.sid, args.uids, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_role_by_memberid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_member_count_by_role(self, seqid, iprot, oprot):
    args = get_session_member_count_by_role_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_member_count_by_role_result()
    try:
      result.success = self._handler.get_session_member_count_by_role(args.sid, args.roles, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_member_count_by_role", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_regular_member_count(self, seqid, iprot, oprot):
    args = get_session_regular_member_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_regular_member_count_result()
    try:
      result.success = self._handler.get_session_regular_member_count(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_regular_member_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_ip_blacklist_count(self, seqid, iprot, oprot):
    args = get_session_ip_blacklist_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_ip_blacklist_count_result()
    try:
      result.success = self._handler.get_session_ip_blacklist_count(args.sid, args.date_from, args.date_to, args.reason, args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_ip_blacklist_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_ip_blacklist(self, seqid, iprot, oprot):
    args = get_session_ip_blacklist_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_ip_blacklist_result()
    try:
      result.success = self._handler.get_session_ip_blacklist(args.sid, args.date_from, args.date_to, args.reason, args.uid, args.columns, args.page, args.per_page, args.order_by, args.descending, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_ip_blacklist", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_id_blacklist_count(self, seqid, iprot, oprot):
    args = get_session_id_blacklist_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_id_blacklist_count_result()
    try:
      result.success = self._handler.get_session_id_blacklist_count(args.sid, args.date_from, args.date_to, args.reason, args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_id_blacklist_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_id_blacklist(self, seqid, iprot, oprot):
    args = get_session_id_blacklist_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_id_blacklist_result()
    try:
      result.success = self._handler.get_session_id_blacklist(args.sid, args.date_from, args.date_to, args.reason, args.uid, args.columns, args.page, args.per_page, args.order_by, args.descending, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_id_blacklist", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_members_by_role(self, seqid, iprot, oprot):
    args = get_session_members_by_role_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_members_by_role_result()
    try:
      result.success = self._handler.get_session_members_by_role(args.sid, args.columns, args.role, args.page, args.per_page, args.order_by, args.descending, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_members_by_role", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_create_session(self, seqid, iprot, oprot):
    args = create_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = create_session_result()
    try:
      result.success = self._handler.create_session(args.sid, args.name, args.isp, args.blimit, args.bpub, args.typestr, args.type, args.uid, args.ip, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("create_session", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_subsession_order(self, seqid, iprot, oprot):
    args = set_subsession_order_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_subsession_order_result()
    try:
      result.success = self._handler.set_subsession_order(args.pid, args.sids, args.orders, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("set_subsession_order", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_session_password(self, seqid, iprot, oprot):
    args = set_session_password_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_session_password_result()
    try:
      result.success = self._handler.set_session_password(args.sid, args.pwd, args.new_pwd, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("set_session_password", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_erase_session_password(self, seqid, iprot, oprot):
    args = erase_session_password_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = erase_session_password_result()
    try:
      result.success = self._handler.erase_session_password(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("erase_session_password", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enable_autio_high_quality(self, seqid, iprot, oprot):
    args = enable_autio_high_quality_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enable_autio_high_quality_result()
    try:
      result.success = self._handler.enable_autio_high_quality(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("enable_autio_high_quality", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_autio_high_quality(self, seqid, iprot, oprot):
    args = set_autio_high_quality_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_autio_high_quality_result()
    try:
      result.success = self._handler.set_autio_high_quality(args.sid, args.flag, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("set_autio_high_quality", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_disable_audio_high_quality(self, seqid, iprot, oprot):
    args = disable_audio_high_quality_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = disable_audio_high_quality_result()
    try:
      result.success = self._handler.disable_audio_high_quality(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("disable_audio_high_quality", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_erase_subsession_admin(self, seqid, iprot, oprot):
    args = erase_subsession_admin_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = erase_subsession_admin_result()
    try:
      result.success = self._handler.erase_subsession_admin(args.sid, args.uids, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("erase_subsession_admin", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_set_session_member_role(self, seqid, iprot, oprot):
    args = batch_set_session_member_role_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_set_session_member_role_result()
    try:
      result.success = self._handler.batch_set_session_member_role(args.sid, args.uids, args.role, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_set_session_member_role", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_erase_subsession_manager(self, seqid, iprot, oprot):
    args = batch_erase_subsession_manager_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_erase_subsession_manager_result()
    try:
      result.success = self._handler.batch_erase_subsession_manager(args.sid, args.uids, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_erase_subsession_manager", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_check_global_ban(self, seqid, iprot, oprot):
    args = check_global_ban_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = check_global_ban_result()
    try:
      result.success = self._handler.check_global_ban(args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("check_global_ban", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_check_cookie(self, seqid, iprot, oprot):
    args = check_cookie_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = check_cookie_result()
    try:
      result.success = self._handler.check_cookie(args.cookie, args.uid, args.expirtime, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("check_cookie", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_erase_session_member(self, seqid, iprot, oprot):
    args = batch_erase_session_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_erase_session_member_result()
    try:
      result.success = self._handler.batch_erase_session_member(args.sid, args.uids, args.admin_uid, args.admin_nick, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_erase_session_member", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_erase_session_blacklist(self, seqid, iprot, oprot):
    args = erase_session_blacklist_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = erase_session_blacklist_result()
    try:
      result.success = self._handler.erase_session_blacklist(args.sid, args.ban_type, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("erase_session_blacklist", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_erase_session_blacklist_element(self, seqid, iprot, oprot):
    args = batch_erase_session_blacklist_element_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_erase_session_blacklist_element_result()
    try:
      result.success = self._handler.batch_erase_session_blacklist_element(args.sid, args.ban_types, args.uids_ips, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_erase_session_blacklist_element", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_application_rule(self, seqid, iprot, oprot):
    args = set_application_rule_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_application_rule_result()
    try:
      result.success = self._handler.set_application_rule(args.sid, args.request_jifen, args.app_instru, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("set_application_rule", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_guild_applications_per_page(self, seqid, iprot, oprot):
    args = get_guild_applications_per_page_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_guild_applications_per_page_result()
    try:
      result.success = self._handler.get_guild_applications_per_page(args.tid, args.columns, args.page, args.per_page, args.order_by, args.descending, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_guild_applications_per_page", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_guild_applications_count(self, seqid, iprot, oprot):
    args = get_guild_applications_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_guild_applications_count_result()
    try:
      result.success = self._handler.get_guild_applications_count(args.tid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_guild_applications_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_guild_applications_by_uids(self, seqid, iprot, oprot):
    args = get_guild_applications_by_uids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_guild_applications_by_uids_result()
    try:
      result.success = self._handler.get_guild_applications_by_uids(args.tid, args.uids, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_guild_applications_by_uids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_handle_applications(self, seqid, iprot, oprot):
    args = handle_applications_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = handle_applications_result()
    try:
      result.success = self._handler.handle_applications(args.tid, args.uids, args.new_role, args.admin_uid, args.admin_nick, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("handle_applications", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_guild_exited_members_per_page(self, seqid, iprot, oprot):
    args = get_guild_exited_members_per_page_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_guild_exited_members_per_page_result()
    try:
      result.success = self._handler.get_guild_exited_members_per_page(args.tid, args.columns, args.page, args.per_page, args.order_by, args.descending, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_guild_exited_members_per_page", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_guild_exited_members_count(self, seqid, iprot, oprot):
    args = get_guild_exited_members_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_guild_exited_members_count_result()
    try:
      result.success = self._handler.get_guild_exited_members_count(args.tid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_guild_exited_members_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_guild_exited_members_by_uids(self, seqid, iprot, oprot):
    args = get_guild_exited_members_by_uids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_guild_exited_members_by_uids_result()
    try:
      result.success = self._handler.get_guild_exited_members_by_uids(args.tid, args.uids, args.columns, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_guild_exited_members_by_uids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_resume_members(self, seqid, iprot, oprot):
    args = resume_members_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = resume_members_result()
    try:
      result.success = self._handler.resume_members(args.tid, args.uids, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("resume_members", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_gyz(self, seqid, iprot, oprot):
    args = get_session_gyz_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_gyz_result()
    try:
      result.success = self._handler.get_session_gyz(args.sid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_gyz", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_sid_by_asid(self, seqid, iprot, oprot):
    args = get_sid_by_asid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_sid_by_asid_result()
    try:
      result.success = self._handler.get_sid_by_asid(args.asid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_sid_by_asid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_session_list_by_ownerid(self, seqid, iprot, oprot):
    args = get_session_list_by_ownerid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_session_list_by_ownerid_result()
    try:
      result.success = self._handler.get_session_list_by_ownerid(args.ownerid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_session_list_by_ownerid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batch_get_sub_sessions_info(self, seqid, iprot, oprot):
    args = batch_get_sub_sessions_info_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batch_get_sub_sessions_info_result()
    try:
      result.success = self._handler.batch_get_sub_sessions_info(args.tid, args.pid, args.columns, args.full_recursive, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("batch_get_sub_sessions_info", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_sub_sessions_count(self, seqid, iprot, oprot):
    args = get_sub_sessions_count_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_sub_sessions_count_result()
    try:
      result.success = self._handler.get_sub_sessions_count(args.tid, args.pid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_sub_sessions_count", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_sub_sessions_order(self, seqid, iprot, oprot):
    args = set_sub_sessions_order_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_sub_sessions_order_result()
    try:
      result.success = self._handler.set_sub_sessions_order(args.tid, args.sub_sessions_sort, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("set_sub_sessions_order", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reset_account_by_passport(self, seqid, iprot, oprot):
    args = reset_account_by_passport_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reset_account_by_passport_result()
    try:
      result.success = self._handler.reset_account_by_passport(args.account, args.passport, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("reset_account_by_passport", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reset_passwd_by_passport(self, seqid, iprot, oprot):
    args = reset_passwd_by_passport_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reset_passwd_by_passport_result()
    try:
      result.success = self._handler.reset_passwd_by_passport(args.passwd, args.passport, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("reset_passwd_by_passport", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_validate_user_pwd(self, seqid, iprot, oprot):
    args = validate_user_pwd_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = validate_user_pwd_result()
    try:
      result.success = self._handler.validate_user_pwd(args.passport, args.shapasswd, args.yzm_auth, args.ip, args.app_type, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("validate_user_pwd", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_validate_user_pwd_by_uid(self, seqid, iprot, oprot):
    args = validate_user_pwd_by_uid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = validate_user_pwd_by_uid_result()
    try:
      result.success = self._handler.validate_user_pwd_by_uid(args.uid, args.shapasswd, args.time, args.ip, args.app_type, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("validate_user_pwd_by_uid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_user_psw(self, seqid, iprot, oprot):
    args = get_user_psw_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_user_psw_result()
    try:
      result.success = self._handler.get_user_psw(args.uid, args.cl)
    except webdb_exception.server.webdb.gateway.ttypes.service_exception, ex:
      result.ex = ex
    oprot.writeMessageBegin("get_user_psw", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_uid_args:
  """
  Attributes:
   - passport
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'passport', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, passport=None, cl=None,):
    self.passport = passport
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.passport = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_uid_args')
    if self.passport != None:
      oprot.writeFieldBegin('passport', TType.STRING, 1)
      oprot.writeString(self.passport)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_uid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_uid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_uid_by_passport_args:
  """
  Attributes:
   - passport
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'passport', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, passport=None, cl=None,):
    self.passport = passport
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.passport = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_uid_by_passport_args')
    if self.passport != None:
      oprot.writeFieldBegin('passport', TType.STRING, 1)
      oprot.writeString(self.passport)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_uid_by_passport_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_uid_by_passport_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class active_uid_args:
  """
  Attributes:
   - passport
   - sha1Passwd
   - ip
   - nick
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'passport', None, None, ), # 1
    (2, TType.STRING, 'sha1Passwd', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
    (4, TType.STRING, 'nick', None, None, ), # 4
    (5, TType.I32, 'cl', None, None, ), # 5
  )

  def __init__(self, passport=None, sha1Passwd=None, ip=None, nick=None, cl=None,):
    self.passport = passport
    self.sha1Passwd = sha1Passwd
    self.ip = ip
    self.nick = nick
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.passport = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sha1Passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nick = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('active_uid_args')
    if self.passport != None:
      oprot.writeFieldBegin('passport', TType.STRING, 1)
      oprot.writeString(self.passport)
      oprot.writeFieldEnd()
    if self.sha1Passwd != None:
      oprot.writeFieldBegin('sha1Passwd', TType.STRING, 2)
      oprot.writeString(self.sha1Passwd)
      oprot.writeFieldEnd()
    if self.ip != None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.nick != None:
      oprot.writeFieldBegin('nick', TType.STRING, 4)
      oprot.writeString(self.nick)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 5)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class active_uid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('active_uid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class active_uid_and_imid_args:
  """
  Attributes:
   - passport
   - sha1Passwd
   - ip
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'passport', None, None, ), # 1
    (2, TType.STRING, 'sha1Passwd', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, passport=None, sha1Passwd=None, ip=None, cl=None,):
    self.passport = passport
    self.sha1Passwd = sha1Passwd
    self.ip = ip
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.passport = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sha1Passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('active_uid_and_imid_args')
    if self.passport != None:
      oprot.writeFieldBegin('passport', TType.STRING, 1)
      oprot.writeString(self.passport)
      oprot.writeFieldEnd()
    if self.sha1Passwd != None:
      oprot.writeFieldBegin('sha1Passwd', TType.STRING, 2)
      oprot.writeString(self.sha1Passwd)
      oprot.writeFieldEnd()
    if self.ip != None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class active_uid_and_imid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.success[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('active_uid_and_imid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter7,viter8 in self.success.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_uid_by_account_args:
  """
  Attributes:
   - account
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'account', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, account=None, cl=None,):
    self.account = account
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.account = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_uid_by_account_args')
    if self.account != None:
      oprot.writeFieldBegin('account', TType.STRING, 1)
      oprot.writeString(self.account)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_uid_by_account_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_uid_by_account_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_args:
  """
  Attributes:
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, uid=None, cl=None,):
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_favorite_session_list_args:
  """
  Attributes:
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, uid=None, cl=None,):
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_favorite_session_list_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_favorite_session_list_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_favorite_session_list_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_count_by_role_args:
  """
  Attributes:
   - uid
   - role
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'role', None, None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, uid=None, role=None, cl=None,):
    self.uid = uid
    self.role = role
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.role = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_count_by_role_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.role != None:
      oprot.writeFieldBegin('role', TType.STRING, 2)
      oprot.writeString(self.role)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_count_by_role_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_count_by_role_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_by_role_args:
  """
  Attributes:
   - uid
   - role
   - page
   - per_page
   - order_by
   - descending
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'role', None, None, ), # 2
    (3, TType.I32, 'page', None, None, ), # 3
    (4, TType.I32, 'per_page', None, None, ), # 4
    (5, TType.STRING, 'order_by', None, None, ), # 5
    (6, TType.BOOL, 'descending', None, None, ), # 6
    (7, TType.I32, 'cl', None, None, ), # 7
  )

  def __init__(self, uid=None, role=None, page=None, per_page=None, order_by=None, descending=None, cl=None,):
    self.uid = uid
    self.role = role
    self.page = page
    self.per_page = per_page
    self.order_by = order_by
    self.descending = descending
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.role = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.per_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.order_by = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.descending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_by_role_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.role != None:
      oprot.writeFieldBegin('role', TType.STRING, 2)
      oprot.writeString(self.role)
      oprot.writeFieldEnd()
    if self.page != None:
      oprot.writeFieldBegin('page', TType.I32, 3)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.per_page != None:
      oprot.writeFieldBegin('per_page', TType.I32, 4)
      oprot.writeI32(self.per_page)
      oprot.writeFieldEnd()
    if self.order_by != None:
      oprot.writeFieldBegin('order_by', TType.STRING, 5)
      oprot.writeString(self.order_by)
      oprot.writeFieldEnd()
    if self.descending != None:
      oprot.writeFieldBegin('descending', TType.BOOL, 6)
      oprot.writeBool(self.descending)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 7)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_by_role_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_by_role_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_list_by_role_args:
  """
  Attributes:
   - uid
   - roles
   - order_by
   - descending
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.LIST, 'roles', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'order_by', None, None, ), # 3
    (4, TType.BOOL, 'descending', None, None, ), # 4
    (5, TType.I32, 'cl', None, None, ), # 5
  )

  def __init__(self, uid=None, roles=None, order_by=None, descending=None, cl=None,):
    self.uid = uid
    self.roles = roles
    self.order_by = order_by
    self.descending = descending
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.roles = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = iprot.readString();
            self.roles.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.order_by = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.descending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_list_by_role_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.roles != None:
      oprot.writeFieldBegin('roles', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.roles))
      for iter15 in self.roles:
        oprot.writeString(iter15)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.order_by != None:
      oprot.writeFieldBegin('order_by', TType.STRING, 3)
      oprot.writeString(self.order_by)
      oprot.writeFieldEnd()
    if self.descending != None:
      oprot.writeFieldBegin('descending', TType.BOOL, 4)
      oprot.writeBool(self.descending)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 5)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_list_by_role_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.LIST,(TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype17, _vtype18, _size16 ) = iprot.readMapBegin() 
          for _i20 in xrange(_size16):
            _key21 = iprot.readString();
            _val22 = []
            (_etype26, _size23) = iprot.readListBegin()
            for _i27 in xrange(_size23):
              _elem28 = iprot.readString();
              _val22.append(_elem28)
            iprot.readListEnd()
            self.success[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_list_by_role_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.success))
      for kiter29,viter30 in self.success.items():
        oprot.writeString(kiter29)
        oprot.writeListBegin(TType.STRING, len(viter30))
        for iter31 in viter30:
          oprot.writeString(iter31)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validate_session_owner_args:
  """
  Attributes:
   - sid
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'uid', None, None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, uid=None, cl=None,):
    self.sid = sid
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validate_session_owner_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 2)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validate_session_owner_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validate_session_owner_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_sessions_by_owner_args:
  """
  Attributes:
   - ownerid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ownerid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, ownerid=None, cl=None,):
    self.ownerid = ownerid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ownerid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_sessions_by_owner_args')
    if self.ownerid != None:
      oprot.writeFieldBegin('ownerid', TType.STRING, 1)
      oprot.writeString(self.ownerid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_sessions_by_owner_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readString();
            self.success.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_sessions_by_owner_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter38 in self.success:
        oprot.writeString(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_info_args:
  """
  Attributes:
   - sid
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'columns', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, columns=None, cl=None,):
    self.sid = sid
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.columns = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = iprot.readString();
            self.columns.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_info_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter45 in self.columns:
        oprot.writeString(iter45)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_info_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_info_args:
  """
  Attributes:
   - sids
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sids', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'columns', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sids=None, columns=None, cl=None,):
    self.sids = sids
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sids = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = iprot.readString();
            self.sids.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.columns = []
          (_etype55, _size52) = iprot.readListBegin()
          for _i56 in xrange(_size52):
            _elem57 = iprot.readString();
            self.columns.append(_elem57)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_info_args')
    if self.sids != None:
      oprot.writeFieldBegin('sids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.sids))
      for iter58 in self.sids:
        oprot.writeString(iter58)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter59 in self.columns:
        oprot.writeString(iter59)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_info_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_user_info_args:
  """
  Attributes:
   - uid
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.LIST, 'columns', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, uid=None, columns=None, cl=None,):
    self.uid = uid
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.columns = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = iprot.readString();
            self.columns.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_user_info_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter66 in self.columns:
        oprot.writeString(iter66)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_user_info_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_user_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_user_info_args:
  """
  Attributes:
   - uids
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uids', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'columns', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, uids=None, columns=None, cl=None,):
    self.uids = uids
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uids = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in xrange(_size67):
            _elem72 = iprot.readString();
            self.uids.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.columns = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = iprot.readString();
            self.columns.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_user_info_args')
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter79 in self.uids:
        oprot.writeString(iter79)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter80 in self.columns:
        oprot.writeString(iter80)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_user_info_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_user_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_score_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_score_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_score_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_score_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_logo_url_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_logo_url_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_logo_url_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_logo_url_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_logo_url_args:
  """
  Attributes:
   - sids
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sids', (TType.STRING,None), None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sids=None, cl=None,):
    self.sids = sids
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sids = []
          (_etype84, _size81) = iprot.readListBegin()
          for _i85 in xrange(_size81):
            _elem86 = iprot.readString();
            self.sids.append(_elem86)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_logo_url_args')
    if self.sids != None:
      oprot.writeFieldBegin('sids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.sids))
      for iter87 in self.sids:
        oprot.writeString(iter87)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_logo_url_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_logo_url_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_asid_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_asid_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_asid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_asid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_asid_args:
  """
  Attributes:
   - sids
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sids', (TType.STRING,None), None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sids=None, cl=None,):
    self.sids = sids
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sids = []
          (_etype91, _size88) = iprot.readListBegin()
          for _i92 in xrange(_size88):
            _elem93 = iprot.readString();
            self.sids.append(_elem93)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_asid_args')
    if self.sids != None:
      oprot.writeFieldBegin('sids', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.sids))
      for iter94 in self.sids:
        oprot.writeString(iter94)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_session_asid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_session_asid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_member_info_args:
  """
  Attributes:
   - sid
   - uid
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'uid', None, None, ), # 2
    (3, TType.LIST, 'columns', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, sid=None, uid=None, columns=None, cl=None,):
    self.sid = sid
    self.uid = uid
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.columns = []
          (_etype98, _size95) = iprot.readListBegin()
          for _i99 in xrange(_size95):
            _elem100 = iprot.readString();
            self.columns.append(_elem100)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_member_info_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 2)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter101 in self.columns:
        oprot.writeString(iter101)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_member_info_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_member_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_member_info_by_session_args:
  """
  Attributes:
   - uid
   - sids
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.LIST, 'sids', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'columns', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, uid=None, sids=None, columns=None, cl=None,):
    self.uid = uid
    self.sids = sids
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sids = []
          (_etype105, _size102) = iprot.readListBegin()
          for _i106 in xrange(_size102):
            _elem107 = iprot.readString();
            self.sids.append(_elem107)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.columns = []
          (_etype111, _size108) = iprot.readListBegin()
          for _i112 in xrange(_size108):
            _elem113 = iprot.readString();
            self.columns.append(_elem113)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_member_info_by_session_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.sids != None:
      oprot.writeFieldBegin('sids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.sids))
      for iter114 in self.sids:
        oprot.writeString(iter114)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter115 in self.columns:
        oprot.writeString(iter115)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_member_info_by_session_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_member_info_by_session_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_member_info_by_user_args:
  """
  Attributes:
   - sid
   - uids
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'columns', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, sid=None, uids=None, columns=None, cl=None,):
    self.sid = sid
    self.uids = uids
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype119, _size116) = iprot.readListBegin()
          for _i120 in xrange(_size116):
            _elem121 = iprot.readString();
            self.uids.append(_elem121)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.columns = []
          (_etype125, _size122) = iprot.readListBegin()
          for _i126 in xrange(_size122):
            _elem127 = iprot.readString();
            self.columns.append(_elem127)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_member_info_by_user_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter128 in self.uids:
        oprot.writeString(iter128)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter129 in self.columns:
        oprot.writeString(iter129)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_member_info_by_user_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_member_info_by_user_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_yy_admin_type_args:
  """
  Attributes:
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, uid=None, cl=None,):
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_yy_admin_type_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_yy_admin_type_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_yy_admin_type_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_count_by_owner_args:
  """
  Attributes:
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, uid=None, cl=None,):
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_count_by_owner_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_count_by_owner_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_count_by_owner_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_role_by_memberid_args:
  """
  Attributes:
   - sid
   - uids
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, uids=None, cl=None,):
    self.sid = sid
    self.uids = uids
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype133, _size130) = iprot.readListBegin()
          for _i134 in xrange(_size130):
            _elem135 = iprot.readString();
            self.uids.append(_elem135)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_role_by_memberid_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter136 in self.uids:
        oprot.writeString(iter136)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_role_by_memberid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype138, _vtype139, _size137 ) = iprot.readMapBegin() 
          for _i141 in xrange(_size137):
            _key142 = iprot.readString();
            _val143 = iprot.readString();
            self.success[_key142] = _val143
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_role_by_memberid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.success))
      for kiter144,viter145 in self.success.items():
        oprot.writeString(kiter144)
        oprot.writeString(viter145)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_member_count_by_role_args:
  """
  Attributes:
   - sid
   - roles
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'roles', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, roles=None, cl=None,):
    self.sid = sid
    self.roles = roles
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.roles = []
          (_etype149, _size146) = iprot.readListBegin()
          for _i150 in xrange(_size146):
            _elem151 = iprot.readString();
            self.roles.append(_elem151)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_member_count_by_role_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.roles != None:
      oprot.writeFieldBegin('roles', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.roles))
      for iter152 in self.roles:
        oprot.writeString(iter152)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_member_count_by_role_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype154, _vtype155, _size153 ) = iprot.readMapBegin() 
          for _i157 in xrange(_size153):
            _key158 = iprot.readString();
            _val159 = iprot.readI32();
            self.success[_key158] = _val159
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_member_count_by_role_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.success))
      for kiter160,viter161 in self.success.items():
        oprot.writeString(kiter160)
        oprot.writeI32(viter161)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_regular_member_count_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_regular_member_count_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_regular_member_count_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_regular_member_count_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_ip_blacklist_count_args:
  """
  Attributes:
   - sid
   - date_from
   - date_to
   - reason
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'date_from', None, None, ), # 2
    (3, TType.STRING, 'date_to', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
    (5, TType.STRING, 'uid', None, None, ), # 5
    (6, TType.I32, 'cl', None, None, ), # 6
  )

  def __init__(self, sid=None, date_from=None, date_to=None, reason=None, uid=None, cl=None,):
    self.sid = sid
    self.date_from = date_from
    self.date_to = date_to
    self.reason = reason
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date_from = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.date_to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_ip_blacklist_count_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.date_from != None:
      oprot.writeFieldBegin('date_from', TType.STRING, 2)
      oprot.writeString(self.date_from)
      oprot.writeFieldEnd()
    if self.date_to != None:
      oprot.writeFieldBegin('date_to', TType.STRING, 3)
      oprot.writeString(self.date_to)
      oprot.writeFieldEnd()
    if self.reason != None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 5)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 6)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_ip_blacklist_count_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_ip_blacklist_count_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_ip_blacklist_args:
  """
  Attributes:
   - sid
   - date_from
   - date_to
   - reason
   - uid
   - columns
   - page
   - per_page
   - order_by
   - descending
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'date_from', None, None, ), # 2
    (3, TType.STRING, 'date_to', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
    (5, TType.STRING, 'uid', None, None, ), # 5
    (6, TType.LIST, 'columns', (TType.STRING,None), None, ), # 6
    (7, TType.I32, 'page', None, None, ), # 7
    (8, TType.I32, 'per_page', None, None, ), # 8
    (9, TType.STRING, 'order_by', None, None, ), # 9
    (10, TType.BOOL, 'descending', None, None, ), # 10
    (11, TType.I32, 'cl', None, None, ), # 11
  )

  def __init__(self, sid=None, date_from=None, date_to=None, reason=None, uid=None, columns=None, page=None, per_page=None, order_by=None, descending=None, cl=None,):
    self.sid = sid
    self.date_from = date_from
    self.date_to = date_to
    self.reason = reason
    self.uid = uid
    self.columns = columns
    self.page = page
    self.per_page = per_page
    self.order_by = order_by
    self.descending = descending
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date_from = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.date_to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.columns = []
          (_etype165, _size162) = iprot.readListBegin()
          for _i166 in xrange(_size162):
            _elem167 = iprot.readString();
            self.columns.append(_elem167)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.per_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.order_by = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.descending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_ip_blacklist_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.date_from != None:
      oprot.writeFieldBegin('date_from', TType.STRING, 2)
      oprot.writeString(self.date_from)
      oprot.writeFieldEnd()
    if self.date_to != None:
      oprot.writeFieldBegin('date_to', TType.STRING, 3)
      oprot.writeString(self.date_to)
      oprot.writeFieldEnd()
    if self.reason != None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 5)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter168 in self.columns:
        oprot.writeString(iter168)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page != None:
      oprot.writeFieldBegin('page', TType.I32, 7)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.per_page != None:
      oprot.writeFieldBegin('per_page', TType.I32, 8)
      oprot.writeI32(self.per_page)
      oprot.writeFieldEnd()
    if self.order_by != None:
      oprot.writeFieldBegin('order_by', TType.STRING, 9)
      oprot.writeString(self.order_by)
      oprot.writeFieldEnd()
    if self.descending != None:
      oprot.writeFieldBegin('descending', TType.BOOL, 10)
      oprot.writeBool(self.descending)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 11)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_ip_blacklist_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_ip_blacklist_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_id_blacklist_count_args:
  """
  Attributes:
   - sid
   - date_from
   - date_to
   - reason
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'date_from', None, None, ), # 2
    (3, TType.STRING, 'date_to', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
    (5, TType.STRING, 'uid', None, None, ), # 5
    (6, TType.I32, 'cl', None, None, ), # 6
  )

  def __init__(self, sid=None, date_from=None, date_to=None, reason=None, uid=None, cl=None,):
    self.sid = sid
    self.date_from = date_from
    self.date_to = date_to
    self.reason = reason
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date_from = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.date_to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_id_blacklist_count_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.date_from != None:
      oprot.writeFieldBegin('date_from', TType.STRING, 2)
      oprot.writeString(self.date_from)
      oprot.writeFieldEnd()
    if self.date_to != None:
      oprot.writeFieldBegin('date_to', TType.STRING, 3)
      oprot.writeString(self.date_to)
      oprot.writeFieldEnd()
    if self.reason != None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 5)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 6)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_id_blacklist_count_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_id_blacklist_count_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_id_blacklist_args:
  """
  Attributes:
   - sid
   - date_from
   - date_to
   - reason
   - uid
   - columns
   - page
   - per_page
   - order_by
   - descending
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'date_from', None, None, ), # 2
    (3, TType.STRING, 'date_to', None, None, ), # 3
    (4, TType.STRING, 'reason', None, None, ), # 4
    (5, TType.STRING, 'uid', None, None, ), # 5
    (6, TType.LIST, 'columns', (TType.STRING,None), None, ), # 6
    (7, TType.I32, 'page', None, None, ), # 7
    (8, TType.I32, 'per_page', None, None, ), # 8
    (9, TType.STRING, 'order_by', None, None, ), # 9
    (10, TType.BOOL, 'descending', None, None, ), # 10
    (11, TType.I32, 'cl', None, None, ), # 11
  )

  def __init__(self, sid=None, date_from=None, date_to=None, reason=None, uid=None, columns=None, page=None, per_page=None, order_by=None, descending=None, cl=None,):
    self.sid = sid
    self.date_from = date_from
    self.date_to = date_to
    self.reason = reason
    self.uid = uid
    self.columns = columns
    self.page = page
    self.per_page = per_page
    self.order_by = order_by
    self.descending = descending
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date_from = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.date_to = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.columns = []
          (_etype172, _size169) = iprot.readListBegin()
          for _i173 in xrange(_size169):
            _elem174 = iprot.readString();
            self.columns.append(_elem174)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.per_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.order_by = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.descending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_id_blacklist_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.date_from != None:
      oprot.writeFieldBegin('date_from', TType.STRING, 2)
      oprot.writeString(self.date_from)
      oprot.writeFieldEnd()
    if self.date_to != None:
      oprot.writeFieldBegin('date_to', TType.STRING, 3)
      oprot.writeString(self.date_to)
      oprot.writeFieldEnd()
    if self.reason != None:
      oprot.writeFieldBegin('reason', TType.STRING, 4)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 5)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter175 in self.columns:
        oprot.writeString(iter175)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page != None:
      oprot.writeFieldBegin('page', TType.I32, 7)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.per_page != None:
      oprot.writeFieldBegin('per_page', TType.I32, 8)
      oprot.writeI32(self.per_page)
      oprot.writeFieldEnd()
    if self.order_by != None:
      oprot.writeFieldBegin('order_by', TType.STRING, 9)
      oprot.writeString(self.order_by)
      oprot.writeFieldEnd()
    if self.descending != None:
      oprot.writeFieldBegin('descending', TType.BOOL, 10)
      oprot.writeBool(self.descending)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 11)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_id_blacklist_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_id_blacklist_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_members_by_role_args:
  """
  Attributes:
   - sid
   - columns
   - role
   - page
   - per_page
   - order_by
   - descending
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'columns', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'role', None, None, ), # 3
    (4, TType.I32, 'page', None, None, ), # 4
    (5, TType.I32, 'per_page', None, None, ), # 5
    (6, TType.STRING, 'order_by', None, None, ), # 6
    (7, TType.BOOL, 'descending', None, None, ), # 7
    (8, TType.I32, 'cl', None, None, ), # 8
  )

  def __init__(self, sid=None, columns=None, role=None, page=None, per_page=None, order_by=None, descending=None, cl=None,):
    self.sid = sid
    self.columns = columns
    self.role = role
    self.page = page
    self.per_page = per_page
    self.order_by = order_by
    self.descending = descending
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.columns = []
          (_etype179, _size176) = iprot.readListBegin()
          for _i180 in xrange(_size176):
            _elem181 = iprot.readString();
            self.columns.append(_elem181)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.role = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.per_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.order_by = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.descending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_members_by_role_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter182 in self.columns:
        oprot.writeString(iter182)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.role != None:
      oprot.writeFieldBegin('role', TType.STRING, 3)
      oprot.writeString(self.role)
      oprot.writeFieldEnd()
    if self.page != None:
      oprot.writeFieldBegin('page', TType.I32, 4)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.per_page != None:
      oprot.writeFieldBegin('per_page', TType.I32, 5)
      oprot.writeI32(self.per_page)
      oprot.writeFieldEnd()
    if self.order_by != None:
      oprot.writeFieldBegin('order_by', TType.STRING, 6)
      oprot.writeString(self.order_by)
      oprot.writeFieldEnd()
    if self.descending != None:
      oprot.writeFieldBegin('descending', TType.BOOL, 7)
      oprot.writeBool(self.descending)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 8)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_members_by_role_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_members_by_role_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class create_session_args:
  """
  Attributes:
   - sid
   - name
   - isp
   - blimit
   - bpub
   - typestr
   - type
   - uid
   - ip
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'isp', None, None, ), # 3
    (4, TType.STRING, 'blimit', None, None, ), # 4
    (5, TType.STRING, 'bpub', None, None, ), # 5
    (6, TType.STRING, 'typestr', None, None, ), # 6
    (7, TType.STRING, 'type', None, None, ), # 7
    (8, TType.STRING, 'uid', None, None, ), # 8
    (9, TType.STRING, 'ip', None, None, ), # 9
    (10, TType.I32, 'cl', None, None, ), # 10
  )

  def __init__(self, sid=None, name=None, isp=None, blimit=None, bpub=None, typestr=None, type=None, uid=None, ip=None, cl=None,):
    self.sid = sid
    self.name = name
    self.isp = isp
    self.blimit = blimit
    self.bpub = bpub
    self.typestr = typestr
    self.type = type
    self.uid = uid
    self.ip = ip
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.isp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.blimit = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.bpub = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.typestr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('create_session_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.isp != None:
      oprot.writeFieldBegin('isp', TType.STRING, 3)
      oprot.writeString(self.isp)
      oprot.writeFieldEnd()
    if self.blimit != None:
      oprot.writeFieldBegin('blimit', TType.STRING, 4)
      oprot.writeString(self.blimit)
      oprot.writeFieldEnd()
    if self.bpub != None:
      oprot.writeFieldBegin('bpub', TType.STRING, 5)
      oprot.writeString(self.bpub)
      oprot.writeFieldEnd()
    if self.typestr != None:
      oprot.writeFieldBegin('typestr', TType.STRING, 6)
      oprot.writeString(self.typestr)
      oprot.writeFieldEnd()
    if self.type != None:
      oprot.writeFieldBegin('type', TType.STRING, 7)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 8)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.ip != None:
      oprot.writeFieldBegin('ip', TType.STRING, 9)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 10)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class create_session_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('create_session_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_subsession_order_args:
  """
  Attributes:
   - pid
   - sids
   - orders
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'pid', None, None, ), # 1
    (2, TType.LIST, 'sids', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'orders', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, pid=None, sids=None, orders=None, cl=None,):
    self.pid = pid
    self.sids = sids
    self.orders = orders
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.pid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sids = []
          (_etype186, _size183) = iprot.readListBegin()
          for _i187 in xrange(_size183):
            _elem188 = iprot.readString();
            self.sids.append(_elem188)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.orders = []
          (_etype192, _size189) = iprot.readListBegin()
          for _i193 in xrange(_size189):
            _elem194 = iprot.readString();
            self.orders.append(_elem194)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_subsession_order_args')
    if self.pid != None:
      oprot.writeFieldBegin('pid', TType.STRING, 1)
      oprot.writeString(self.pid)
      oprot.writeFieldEnd()
    if self.sids != None:
      oprot.writeFieldBegin('sids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.sids))
      for iter195 in self.sids:
        oprot.writeString(iter195)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orders != None:
      oprot.writeFieldBegin('orders', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.orders))
      for iter196 in self.orders:
        oprot.writeString(iter196)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_subsession_order_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_subsession_order_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_session_password_args:
  """
  Attributes:
   - sid
   - pwd
   - new_pwd
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'pwd', None, None, ), # 2
    (3, TType.STRING, 'new_pwd', None, None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, sid=None, pwd=None, new_pwd=None, cl=None,):
    self.sid = sid
    self.pwd = pwd
    self.new_pwd = new_pwd
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.new_pwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_session_password_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.pwd != None:
      oprot.writeFieldBegin('pwd', TType.STRING, 2)
      oprot.writeString(self.pwd)
      oprot.writeFieldEnd()
    if self.new_pwd != None:
      oprot.writeFieldBegin('new_pwd', TType.STRING, 3)
      oprot.writeString(self.new_pwd)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_session_password_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_session_password_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class erase_session_password_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('erase_session_password_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class erase_session_password_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('erase_session_password_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enable_autio_high_quality_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enable_autio_high_quality_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enable_autio_high_quality_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enable_autio_high_quality_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_autio_high_quality_args:
  """
  Attributes:
   - sid
   - flag
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'flag', None, None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, flag=None, cl=None,):
    self.sid = sid
    self.flag = flag
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.flag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_autio_high_quality_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.flag != None:
      oprot.writeFieldBegin('flag', TType.STRING, 2)
      oprot.writeString(self.flag)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_autio_high_quality_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_autio_high_quality_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disable_audio_high_quality_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disable_audio_high_quality_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disable_audio_high_quality_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disable_audio_high_quality_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class erase_subsession_admin_args:
  """
  Attributes:
   - sid
   - uids
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, uids=None, cl=None,):
    self.sid = sid
    self.uids = uids
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype200, _size197) = iprot.readListBegin()
          for _i201 in xrange(_size197):
            _elem202 = iprot.readString();
            self.uids.append(_elem202)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('erase_subsession_admin_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter203 in self.uids:
        oprot.writeString(iter203)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class erase_subsession_admin_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('erase_subsession_admin_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_set_session_member_role_args:
  """
  Attributes:
   - sid
   - uids
   - role
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'role', None, None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, sid=None, uids=None, role=None, cl=None,):
    self.sid = sid
    self.uids = uids
    self.role = role
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype207, _size204) = iprot.readListBegin()
          for _i208 in xrange(_size204):
            _elem209 = iprot.readString();
            self.uids.append(_elem209)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.role = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_set_session_member_role_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter210 in self.uids:
        oprot.writeString(iter210)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.role != None:
      oprot.writeFieldBegin('role', TType.STRING, 3)
      oprot.writeString(self.role)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_set_session_member_role_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_set_session_member_role_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_erase_subsession_manager_args:
  """
  Attributes:
   - sid
   - uids
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, uids=None, cl=None,):
    self.sid = sid
    self.uids = uids
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype214, _size211) = iprot.readListBegin()
          for _i215 in xrange(_size211):
            _elem216 = iprot.readString();
            self.uids.append(_elem216)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_erase_subsession_manager_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter217 in self.uids:
        oprot.writeString(iter217)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_erase_subsession_manager_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_erase_subsession_manager_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_global_ban_args:
  """
  Attributes:
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, uid=None, cl=None,):
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_global_ban_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_global_ban_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_global_ban_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_cookie_args:
  """
  Attributes:
   - cookie
   - uid
   - expirtime
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cookie', None, None, ), # 1
    (2, TType.STRING, 'uid', None, None, ), # 2
    (3, TType.STRING, 'expirtime', None, None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, cookie=None, uid=None, expirtime=None, cl=None,):
    self.cookie = cookie
    self.uid = uid
    self.expirtime = expirtime
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cookie = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.expirtime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_cookie_args')
    if self.cookie != None:
      oprot.writeFieldBegin('cookie', TType.STRING, 1)
      oprot.writeString(self.cookie)
      oprot.writeFieldEnd()
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 2)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.expirtime != None:
      oprot.writeFieldBegin('expirtime', TType.STRING, 3)
      oprot.writeString(self.expirtime)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class check_cookie_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('check_cookie_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_erase_session_member_args:
  """
  Attributes:
   - sid
   - uids
   - admin_uid
   - admin_nick
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'admin_uid', None, None, ), # 3
    (4, TType.STRING, 'admin_nick', None, None, ), # 4
    (5, TType.I32, 'cl', None, None, ), # 5
  )

  def __init__(self, sid=None, uids=None, admin_uid=None, admin_nick=None, cl=None,):
    self.sid = sid
    self.uids = uids
    self.admin_uid = admin_uid
    self.admin_nick = admin_nick
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype221, _size218) = iprot.readListBegin()
          for _i222 in xrange(_size218):
            _elem223 = iprot.readString();
            self.uids.append(_elem223)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.admin_uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.admin_nick = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_erase_session_member_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter224 in self.uids:
        oprot.writeString(iter224)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.admin_uid != None:
      oprot.writeFieldBegin('admin_uid', TType.STRING, 3)
      oprot.writeString(self.admin_uid)
      oprot.writeFieldEnd()
    if self.admin_nick != None:
      oprot.writeFieldBegin('admin_nick', TType.STRING, 4)
      oprot.writeString(self.admin_nick)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 5)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_erase_session_member_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_erase_session_member_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class erase_session_blacklist_args:
  """
  Attributes:
   - sid
   - ban_type
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.BYTE, 'ban_type', None, None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, sid=None, ban_type=None, cl=None,):
    self.sid = sid
    self.ban_type = ban_type
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.ban_type = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('erase_session_blacklist_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.ban_type != None:
      oprot.writeFieldBegin('ban_type', TType.BYTE, 2)
      oprot.writeByte(self.ban_type)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class erase_session_blacklist_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('erase_session_blacklist_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_erase_session_blacklist_element_args:
  """
  Attributes:
   - sid
   - ban_types
   - uids_ips
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.LIST, 'ban_types', (TType.BYTE,None), None, ), # 2
    (3, TType.LIST, 'uids_ips', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, sid=None, ban_types=None, uids_ips=None, cl=None,):
    self.sid = sid
    self.ban_types = ban_types
    self.uids_ips = uids_ips
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ban_types = []
          (_etype228, _size225) = iprot.readListBegin()
          for _i229 in xrange(_size225):
            _elem230 = iprot.readByte();
            self.ban_types.append(_elem230)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.uids_ips = []
          (_etype234, _size231) = iprot.readListBegin()
          for _i235 in xrange(_size231):
            _elem236 = iprot.readString();
            self.uids_ips.append(_elem236)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_erase_session_blacklist_element_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.ban_types != None:
      oprot.writeFieldBegin('ban_types', TType.LIST, 2)
      oprot.writeListBegin(TType.BYTE, len(self.ban_types))
      for iter237 in self.ban_types:
        oprot.writeByte(iter237)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.uids_ips != None:
      oprot.writeFieldBegin('uids_ips', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.uids_ips))
      for iter238 in self.uids_ips:
        oprot.writeString(iter238)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_erase_session_blacklist_element_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_erase_session_blacklist_element_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_application_rule_args:
  """
  Attributes:
   - sid
   - request_jifen
   - app_instru
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.STRING, 'request_jifen', None, None, ), # 2
    (3, TType.STRING, 'app_instru', None, None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, sid=None, request_jifen=None, app_instru=None, cl=None,):
    self.sid = sid
    self.request_jifen = request_jifen
    self.app_instru = app_instru
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.request_jifen = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.app_instru = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_application_rule_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.request_jifen != None:
      oprot.writeFieldBegin('request_jifen', TType.STRING, 2)
      oprot.writeString(self.request_jifen)
      oprot.writeFieldEnd()
    if self.app_instru != None:
      oprot.writeFieldBegin('app_instru', TType.STRING, 3)
      oprot.writeString(self.app_instru)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_application_rule_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_application_rule_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_applications_per_page_args:
  """
  Attributes:
   - tid
   - columns
   - page
   - per_page
   - order_by
   - descending
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.LIST, 'columns', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'page', None, None, ), # 3
    (4, TType.I32, 'per_page', None, None, ), # 4
    (5, TType.STRING, 'order_by', None, None, ), # 5
    (6, TType.BOOL, 'descending', None, None, ), # 6
    (7, TType.I32, 'cl', None, None, ), # 7
  )

  def __init__(self, tid=None, columns=None, page=None, per_page=None, order_by=None, descending=None, cl=None,):
    self.tid = tid
    self.columns = columns
    self.page = page
    self.per_page = per_page
    self.order_by = order_by
    self.descending = descending
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.columns = []
          (_etype242, _size239) = iprot.readListBegin()
          for _i243 in xrange(_size239):
            _elem244 = iprot.readString();
            self.columns.append(_elem244)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.per_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.order_by = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.descending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_applications_per_page_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter245 in self.columns:
        oprot.writeString(iter245)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page != None:
      oprot.writeFieldBegin('page', TType.I32, 3)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.per_page != None:
      oprot.writeFieldBegin('per_page', TType.I32, 4)
      oprot.writeI32(self.per_page)
      oprot.writeFieldEnd()
    if self.order_by != None:
      oprot.writeFieldBegin('order_by', TType.STRING, 5)
      oprot.writeString(self.order_by)
      oprot.writeFieldEnd()
    if self.descending != None:
      oprot.writeFieldBegin('descending', TType.BOOL, 6)
      oprot.writeBool(self.descending)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 7)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_applications_per_page_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_applications_per_page_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_applications_count_args:
  """
  Attributes:
   - tid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, tid=None, cl=None,):
    self.tid = tid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_applications_count_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_applications_count_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_applications_count_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_applications_by_uids_args:
  """
  Attributes:
   - tid
   - uids
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'columns', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, tid=None, uids=None, columns=None, cl=None,):
    self.tid = tid
    self.uids = uids
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype249, _size246) = iprot.readListBegin()
          for _i250 in xrange(_size246):
            _elem251 = iprot.readString();
            self.uids.append(_elem251)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.columns = []
          (_etype255, _size252) = iprot.readListBegin()
          for _i256 in xrange(_size252):
            _elem257 = iprot.readString();
            self.columns.append(_elem257)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_applications_by_uids_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter258 in self.uids:
        oprot.writeString(iter258)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter259 in self.columns:
        oprot.writeString(iter259)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_applications_by_uids_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_applications_by_uids_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handle_applications_args:
  """
  Attributes:
   - tid
   - uids
   - new_role
   - admin_uid
   - admin_nick
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.STRING, 'new_role', None, None, ), # 3
    (4, TType.STRING, 'admin_uid', None, None, ), # 4
    (5, TType.STRING, 'admin_nick', None, None, ), # 5
    (6, TType.I32, 'cl', None, None, ), # 6
  )

  def __init__(self, tid=None, uids=None, new_role=None, admin_uid=None, admin_nick=None, cl=None,):
    self.tid = tid
    self.uids = uids
    self.new_role = new_role
    self.admin_uid = admin_uid
    self.admin_nick = admin_nick
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype263, _size260) = iprot.readListBegin()
          for _i264 in xrange(_size260):
            _elem265 = iprot.readString();
            self.uids.append(_elem265)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.new_role = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.admin_uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.admin_nick = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handle_applications_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter266 in self.uids:
        oprot.writeString(iter266)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.new_role != None:
      oprot.writeFieldBegin('new_role', TType.STRING, 3)
      oprot.writeString(self.new_role)
      oprot.writeFieldEnd()
    if self.admin_uid != None:
      oprot.writeFieldBegin('admin_uid', TType.STRING, 4)
      oprot.writeString(self.admin_uid)
      oprot.writeFieldEnd()
    if self.admin_nick != None:
      oprot.writeFieldBegin('admin_nick', TType.STRING, 5)
      oprot.writeString(self.admin_nick)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 6)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class handle_applications_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('handle_applications_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_exited_members_per_page_args:
  """
  Attributes:
   - tid
   - columns
   - page
   - per_page
   - order_by
   - descending
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.LIST, 'columns', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'page', None, None, ), # 3
    (4, TType.I32, 'per_page', None, None, ), # 4
    (5, TType.STRING, 'order_by', None, None, ), # 5
    (6, TType.BOOL, 'descending', None, None, ), # 6
    (7, TType.I32, 'cl', None, None, ), # 7
  )

  def __init__(self, tid=None, columns=None, page=None, per_page=None, order_by=None, descending=None, cl=None,):
    self.tid = tid
    self.columns = columns
    self.page = page
    self.per_page = per_page
    self.order_by = order_by
    self.descending = descending
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.columns = []
          (_etype270, _size267) = iprot.readListBegin()
          for _i271 in xrange(_size267):
            _elem272 = iprot.readString();
            self.columns.append(_elem272)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.per_page = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.order_by = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.descending = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_exited_members_per_page_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter273 in self.columns:
        oprot.writeString(iter273)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.page != None:
      oprot.writeFieldBegin('page', TType.I32, 3)
      oprot.writeI32(self.page)
      oprot.writeFieldEnd()
    if self.per_page != None:
      oprot.writeFieldBegin('per_page', TType.I32, 4)
      oprot.writeI32(self.per_page)
      oprot.writeFieldEnd()
    if self.order_by != None:
      oprot.writeFieldBegin('order_by', TType.STRING, 5)
      oprot.writeString(self.order_by)
      oprot.writeFieldEnd()
    if self.descending != None:
      oprot.writeFieldBegin('descending', TType.BOOL, 6)
      oprot.writeBool(self.descending)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 7)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_exited_members_per_page_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_exited_members_per_page_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_exited_members_count_args:
  """
  Attributes:
   - tid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, tid=None, cl=None,):
    self.tid = tid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_exited_members_count_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_exited_members_count_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_exited_members_count_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_exited_members_by_uids_args:
  """
  Attributes:
   - tid
   - uids
   - columns
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'columns', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'cl', None, None, ), # 4
  )

  def __init__(self, tid=None, uids=None, columns=None, cl=None,):
    self.tid = tid
    self.uids = uids
    self.columns = columns
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype277, _size274) = iprot.readListBegin()
          for _i278 in xrange(_size274):
            _elem279 = iprot.readString();
            self.uids.append(_elem279)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.columns = []
          (_etype283, _size280) = iprot.readListBegin()
          for _i284 in xrange(_size280):
            _elem285 = iprot.readString();
            self.columns.append(_elem285)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_exited_members_by_uids_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter286 in self.uids:
        oprot.writeString(iter286)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter287 in self.columns:
        oprot.writeString(iter287)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 4)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_guild_exited_members_by_uids_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_guild_exited_members_by_uids_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class resume_members_args:
  """
  Attributes:
   - tid
   - uids
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.LIST, 'uids', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, tid=None, uids=None, cl=None,):
    self.tid = tid
    self.uids = uids
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.uids = []
          (_etype291, _size288) = iprot.readListBegin()
          for _i292 in xrange(_size288):
            _elem293 = iprot.readString();
            self.uids.append(_elem293)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('resume_members_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.uids != None:
      oprot.writeFieldBegin('uids', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.uids))
      for iter294 in self.uids:
        oprot.writeString(iter294)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class resume_members_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('resume_members_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_gyz_args:
  """
  Attributes:
   - sid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, sid=None, cl=None,):
    self.sid = sid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_gyz_args')
    if self.sid != None:
      oprot.writeFieldBegin('sid', TType.STRING, 1)
      oprot.writeString(self.sid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_gyz_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_gyz_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_sid_by_asid_args:
  """
  Attributes:
   - asid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'asid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, asid=None, cl=None,):
    self.asid = asid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.asid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_sid_by_asid_args')
    if self.asid != None:
      oprot.writeFieldBegin('asid', TType.STRING, 1)
      oprot.writeString(self.asid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_sid_by_asid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_sid_by_asid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_by_ownerid_args:
  """
  Attributes:
   - ownerid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ownerid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, ownerid=None, cl=None,):
    self.ownerid = ownerid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ownerid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_by_ownerid_args')
    if self.ownerid != None:
      oprot.writeFieldBegin('ownerid', TType.STRING, 1)
      oprot.writeString(self.ownerid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_session_list_by_ownerid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_session_list_by_ownerid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_sub_sessions_info_args:
  """
  Attributes:
   - tid
   - pid
   - columns
   - full_recursive
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.STRING, 'pid', None, None, ), # 2
    (3, TType.LIST, 'columns', (TType.STRING,None), None, ), # 3
    (4, TType.BOOL, 'full_recursive', None, None, ), # 4
    (5, TType.I32, 'cl', None, None, ), # 5
  )

  def __init__(self, tid=None, pid=None, columns=None, full_recursive=None, cl=None,):
    self.tid = tid
    self.pid = pid
    self.columns = columns
    self.full_recursive = full_recursive
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.columns = []
          (_etype298, _size295) = iprot.readListBegin()
          for _i299 in xrange(_size295):
            _elem300 = iprot.readString();
            self.columns.append(_elem300)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.full_recursive = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_sub_sessions_info_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.pid != None:
      oprot.writeFieldBegin('pid', TType.STRING, 2)
      oprot.writeString(self.pid)
      oprot.writeFieldEnd()
    if self.columns != None:
      oprot.writeFieldBegin('columns', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.columns))
      for iter301 in self.columns:
        oprot.writeString(iter301)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.full_recursive != None:
      oprot.writeFieldBegin('full_recursive', TType.BOOL, 4)
      oprot.writeBool(self.full_recursive)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 5)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batch_get_sub_sessions_info_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batch_get_sub_sessions_info_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_sub_sessions_count_args:
  """
  Attributes:
   - tid
   - pid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.STRING, 'pid', None, None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, tid=None, pid=None, cl=None,):
    self.tid = tid
    self.pid = pid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.pid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_sub_sessions_count_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.pid != None:
      oprot.writeFieldBegin('pid', TType.STRING, 2)
      oprot.writeString(self.pid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_sub_sessions_count_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (webdb_statement.server.webdb.gateway.ttypes.query_resultset, webdb_statement.server.webdb.gateway.ttypes.query_resultset.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = webdb_statement.server.webdb.gateway.ttypes.query_resultset()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_sub_sessions_count_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_sub_sessions_order_args:
  """
  Attributes:
   - tid
   - sub_sessions_sort
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tid', None, None, ), # 1
    (2, TType.MAP, 'sub_sessions_sort', (TType.STRING,None,TType.MAP,(TType.STRING,None,TType.STRING,None)), None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, tid=None, sub_sessions_sort=None, cl=None,):
    self.tid = tid
    self.sub_sessions_sort = sub_sessions_sort
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.sub_sessions_sort = {}
          (_ktype303, _vtype304, _size302 ) = iprot.readMapBegin() 
          for _i306 in xrange(_size302):
            _key307 = iprot.readString();
            _val308 = {}
            (_ktype310, _vtype311, _size309 ) = iprot.readMapBegin() 
            for _i313 in xrange(_size309):
              _key314 = iprot.readString();
              _val315 = iprot.readString();
              _val308[_key314] = _val315
            iprot.readMapEnd()
            self.sub_sessions_sort[_key307] = _val308
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_sub_sessions_order_args')
    if self.tid != None:
      oprot.writeFieldBegin('tid', TType.STRING, 1)
      oprot.writeString(self.tid)
      oprot.writeFieldEnd()
    if self.sub_sessions_sort != None:
      oprot.writeFieldBegin('sub_sessions_sort', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.sub_sessions_sort))
      for kiter316,viter317 in self.sub_sessions_sort.items():
        oprot.writeString(kiter316)
        oprot.writeMapBegin(TType.STRING, TType.STRING, len(viter317))
        for kiter318,viter319 in viter317.items():
          oprot.writeString(kiter318)
          oprot.writeString(viter319)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_sub_sessions_order_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_sub_sessions_order_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reset_account_by_passport_args:
  """
  Attributes:
   - account
   - passport
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'account', None, None, ), # 1
    (2, TType.STRING, 'passport', None, None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, account=None, passport=None, cl=None,):
    self.account = account
    self.passport = passport
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.account = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.passport = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reset_account_by_passport_args')
    if self.account != None:
      oprot.writeFieldBegin('account', TType.STRING, 1)
      oprot.writeString(self.account)
      oprot.writeFieldEnd()
    if self.passport != None:
      oprot.writeFieldBegin('passport', TType.STRING, 2)
      oprot.writeString(self.passport)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reset_account_by_passport_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reset_account_by_passport_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reset_passwd_by_passport_args:
  """
  Attributes:
   - passwd
   - passport
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'passwd', None, None, ), # 1
    (2, TType.STRING, 'passport', None, None, ), # 2
    (3, TType.I32, 'cl', None, None, ), # 3
  )

  def __init__(self, passwd=None, passport=None, cl=None,):
    self.passwd = passwd
    self.passport = passport
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.passwd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.passport = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reset_passwd_by_passport_args')
    if self.passwd != None:
      oprot.writeFieldBegin('passwd', TType.STRING, 1)
      oprot.writeString(self.passwd)
      oprot.writeFieldEnd()
    if self.passport != None:
      oprot.writeFieldBegin('passport', TType.STRING, 2)
      oprot.writeString(self.passport)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 3)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reset_passwd_by_passport_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reset_passwd_by_passport_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validate_user_pwd_args:
  """
  Attributes:
   - passport
   - shapasswd
   - yzm_auth
   - ip
   - app_type
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'passport', None, None, ), # 1
    (2, TType.STRING, 'shapasswd', None, None, ), # 2
    (3, TType.STRING, 'yzm_auth', None, None, ), # 3
    (4, TType.STRING, 'ip', None, None, ), # 4
    (5, TType.STRING, 'app_type', None, None, ), # 5
    (6, TType.I32, 'cl', None, None, ), # 6
  )

  def __init__(self, passport=None, shapasswd=None, yzm_auth=None, ip=None, app_type=None, cl=None,):
    self.passport = passport
    self.shapasswd = shapasswd
    self.yzm_auth = yzm_auth
    self.ip = ip
    self.app_type = app_type
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.passport = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shapasswd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.yzm_auth = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.app_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validate_user_pwd_args')
    if self.passport != None:
      oprot.writeFieldBegin('passport', TType.STRING, 1)
      oprot.writeString(self.passport)
      oprot.writeFieldEnd()
    if self.shapasswd != None:
      oprot.writeFieldBegin('shapasswd', TType.STRING, 2)
      oprot.writeString(self.shapasswd)
      oprot.writeFieldEnd()
    if self.yzm_auth != None:
      oprot.writeFieldBegin('yzm_auth', TType.STRING, 3)
      oprot.writeString(self.yzm_auth)
      oprot.writeFieldEnd()
    if self.ip != None:
      oprot.writeFieldBegin('ip', TType.STRING, 4)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.app_type != None:
      oprot.writeFieldBegin('app_type', TType.STRING, 5)
      oprot.writeString(self.app_type)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 6)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validate_user_pwd_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validate_user_pwd_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validate_user_pwd_by_uid_args:
  """
  Attributes:
   - uid
   - shapasswd
   - time
   - ip
   - app_type
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.STRING, 'shapasswd', None, None, ), # 2
    (3, TType.STRING, 'time', None, None, ), # 3
    (4, TType.STRING, 'ip', None, None, ), # 4
    (5, TType.STRING, 'app_type', None, None, ), # 5
    (6, TType.I32, 'cl', None, None, ), # 6
  )

  def __init__(self, uid=None, shapasswd=None, time=None, ip=None, app_type=None, cl=None,):
    self.uid = uid
    self.shapasswd = shapasswd
    self.time = time
    self.ip = ip
    self.app_type = app_type
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.shapasswd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.app_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validate_user_pwd_by_uid_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.shapasswd != None:
      oprot.writeFieldBegin('shapasswd', TType.STRING, 2)
      oprot.writeString(self.shapasswd)
      oprot.writeFieldEnd()
    if self.time != None:
      oprot.writeFieldBegin('time', TType.STRING, 3)
      oprot.writeString(self.time)
      oprot.writeFieldEnd()
    if self.ip != None:
      oprot.writeFieldBegin('ip', TType.STRING, 4)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    if self.app_type != None:
      oprot.writeFieldBegin('app_type', TType.STRING, 5)
      oprot.writeString(self.app_type)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 6)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validate_user_pwd_by_uid_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validate_user_pwd_by_uid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_user_psw_args:
  """
  Attributes:
   - uid
   - cl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'cl', None, None, ), # 2
  )

  def __init__(self, uid=None, cl=None,):
    self.uid = uid
    self.cl = cl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.cl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_user_psw_args')
    if self.uid != None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.cl != None:
      oprot.writeFieldBegin('cl', TType.I32, 2)
      oprot.writeI32(self.cl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_user_psw_result:
  """
  Attributes:
   - success
   - ex
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'ex', (webdb_exception.server.webdb.gateway.ttypes.service_exception, webdb_exception.server.webdb.gateway.ttypes.service_exception.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, ex=None,):
    self.success = success
    self.ex = ex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.ex = webdb_exception.server.webdb.gateway.ttypes.service_exception()
          self.ex.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_user_psw_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.ex != None:
      oprot.writeFieldBegin('ex', TType.STRUCT, 1)
      self.ex.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


